THEORY User_Pass IS
Pattern(bv8_and: BYTE*BYTE +-> BYTE) & ff(0) & pr;
Pattern(dom(bv8_and) = BYTE*BYTE) & ff(0) & dd & eh(bv8_and,_h,Goal) & ar(SimplifyRelDomXY.5,Goal) & pp(rt.0);
Pattern(bv8_or: BYTE*BYTE +-> BYTE) & ff(0) & pr;
Pattern(dom(bv8_or) = BYTE*BYTE) & ff(0) & dd & eh(bv8_or,_h,Goal) & ar(SimplifyRelDomXY.5,Goal) & pp(rt.0);
Pattern(bv8_xor: BYTE*BYTE +-> BYTE) & ff(0) & pr;
Pattern(dom(bv8_xor) = BYTE*BYTE) & ff(0) & dd & eh(bv8_xor,_h,Goal) & ar(SimplifyRelDomXY.5,Goal) & pp(rt.0);
Pattern(size(bt) = 8) & ff(0) & pr;
Pattern(ran(is_zero): POW(BIT)) & ff(0) & pr;
Pattern(ran(parity_even): POW(BIT)) & ff(0) & pr;
Pattern(ran(complement): POW(BYTE)) & ff(0) & pr;
Pattern(ran(swap): POW(BYTE)) & ff(0) & pr;
Pattern(ran(rotateleft): POW(BYTE)) & ff(0) & pr;
Pattern(ran(rotateright): POW(BYTE)) & ff(0) & pr;
Pattern(ran(get_upper_digit): POW(0..15)) & ff(0) & pr;
Pattern(ran(get_lower_digit): POW(0..15)) & ff(0) & pr;
Pattern([1,1,1,1,1,1,1,1]: BYTE) & ff(0) & dd & eh(BYTE,_h,Goal) & pp(rt.0);
Pattern([0,0,0,0,0,0,0,0]: BYTE) & ff(0) & dd & eh(BYTE,_h,Goal) & pp(rt.0)
; 
Operation(AssertionLemmas) & mp(Tac(RulesProBAssertionLemmas_1)); 
Operation(WellDefinednessProperties) & mp(Tac(RulesProBWellDefinednessProperties_1)); 
Operation(WellDefinednessProperties) & mp(Tac(RulesProBWellDefinednessProperties_36)); 
Operation(WellDefinednessAssertions) & mp(Tac(RulesProBWellDefinednessAssertions_1)); 
Operation(WellDefinednessAssertions) & mp(Tac(RulesProBWellDefinednessAssertions_2))
END
  &
THEORY RulesProBAssertionLemmas_1 IS 


	 /* Expression from (AssertionLemmas_1), it was added  in Tue Oct 07 10:35:22 BRT 2014
	  evaluated with ProB in 2856 milliseconds
	  Module Path:/media/B_Resources/Z80_ProB/BYTE_DEFINITION.mch */

	 
!(bb).(((bb : BIT) => ((bit_not )(bb) = (1 - bb)))) & (dom(bit_and) = (BIT * BIT)) & (ran(bit_not) = BIT) & ((bit_not )(0) = 1) & ((bit_not )(1) = 0) & !(bb).(((bb : BIT) => ((bit_not )((bit_not )(bb)) = bb))) & (dom(bit_and) = (BIT * BIT)) & (ran(bit_and) = BIT) & ((bit_and )((0 , 0)) = 0) & ((bit_and )((0 , 1)) = 0) & ((bit_and )((1 , 0)) = 0) & ((bit_and )((1 , 1)) = 1) & !(b1,b2).(((b1 : BIT) & (b2 : BIT) => ((bit_and )((b1 , b2)) = (bit_and )((b2 , b1))))) & !(b1,b2).(((b1 : BIT) & (b2 : BIT) & ((bit_and )((b1 , b2)) = 1) => ((bit_and )((b2 , b1)) = 1))) & !(b1,b2).(((b1 : BIT) & (b2 : BIT) & ((bit_and )((b1 , b2)) = 0) => ((bit_and )((b2 , b1)) = 0))) & !(b1,b2,b3).(((b1 : BIT) & (b2 : BIT) & (b3 : BIT) => ((bit_and )((b1 , (bit_and )((b2 , b3)))) = (bit_and )(((bit_and )((b1 , b2)) , b3))))) & !(b1).(((b1 : BIT) => ((bit_and )((b1 , 1)) = b1))) & !(b1).(((b1 : BIT) => ((bit_and )((b1 , 0)) = 0))) & (dom(bit_or) = (BIT * BIT)) & (ran(bit_or) = BIT) & ((bit_or )((0 , 0)) = 0) & ((bit_or )((0 , 1)) = 1) & ((bit_or )((1 , 0)) = 1) & ((bit_or )((1 , 1)) = 1) & !(b1,b2).(((b1 : BIT) & (b2 : BIT) => ((bit_or )((b1 , b2)) = (bit_or )((b2 , b1))))) & !(b1,b2).(((b1 : BIT) & (b2 : BIT) & ((bit_or )((b1 , b2)) = 1) => ((bit_or )((b2 , b1)) = 1))) & !(b1,b2).(((b1 : BIT) & (b2 : BIT) & ((bit_or )((b1 , b2)) = 0) => ((bit_or )((b2 , b1)) = 0))) & !(b1,b2).(((b1 : BIT) & (b2 : BIT) & ((bit_or )((b1 , 0)) = 1) => (b1 = 1))) & !(b1,b2).(((b1 : BIT) & (b2 : BIT) & ((bit_or )((b1 , 0)) = 0) => (b1 = 0))) & !(b1,b2,b3).(((b1 : BIT) & (b2 : BIT) & (b3 : BIT) => ((bit_or )((b1 , (bit_or )((b2 , b3)))) = (bit_or )(((bit_or )((b1 , b2)) , b3))))) & !(b1,b2,b3).(((b1 : BIT) & (b2 : BIT) & (b3 : BIT) & ((bit_or )((b1 , b2)) = 1) => ((bit_or )((b1 , (bit_or )((b2 , b3)))) = 1))) & !(b1,b2,b3).(((b1 : BIT) & (b2 : BIT) & (b3 : BIT) & ((bit_or )((b1 , b2)) = 1) => ((bit_or )((b1 , (bit_or )((b2 , b3)))) = (bit_or )((1 , b3))))) & !(b1).(((b1 : BIT) => ((bit_or )((b1 , 1)) = 1))) & !(b1).(((b1 : BIT) => ((bit_or )((b1 , 0)) = b1))) & !(b1).(((b1 : BIT) => ((bit_or )((1 , b1)) = 1))) & !(b1).(((b1 : BIT) => ((bit_or )((0 , b1)) = b1))) & (dom(bit_xor) = (BIT * BIT)) & (ran(bit_xor) = BIT) & ((bit_xor )((0 , 0)) = 0) & ((bit_xor )((0 , 1)) = 1) & ((bit_xor )((1 , 0)) = 1) & ((bit_xor )((1 , 1)) = 0) & !(b1,b2).(((b1 : BIT) & (b2 : BIT) => ((bit_xor )((b1 , b2)) = (bit_xor )((b2 , b1))))) & !(b1,b2).(((b1 : BIT) & (b2 : BIT) & ((bit_xor )((b1 , b2)) = 1) => ((bit_xor )((b2 , b1)) = 1))) & !(b1,b2).(((b1 : BIT) & (b2 : BIT) & ((bit_xor )((b1 , b2)) = 0) => ((bit_xor )((b2 , b1)) = 0))) & !(b1,b2,b3).(((b1 : BIT) & (b2 : BIT) & (b3 : BIT) => ((bit_xor )((b1 , (bit_xor )((b2 , b3)))) = (bit_xor )(((bit_xor )((b1 , b2)) , b3))))) & !(b1,b2,b3).(((b1 : BIT) & (b2 : BIT) & (b3 : BIT) & ((bit_xor )((b1 , b2)) = 1) => ((bit_xor )((b1 , (bit_xor )((b2 , b3)))) = (bit_xor )((1 , b3))))) & !(bb).(((bb : BIT) => ((bit_xor )((bb , bb)) = 0))) & (dom(bool_bit) = BOOL) & (ran(bit_xor) = BIT) & ((bool_bit )(TRUE) = 1) & ((bool_bit )(FALSE) = 0) & !(bb).(((bb : BIT) => ((bb = 0) or (bb = 1)))) & !(bb).(((bb : BIT) & not((bb = 0)) => (bb = 1))) & !(bb).(((bb : BIT) & not((bb = 1)) => (bb = 0))) & ((2 ** 0) = 1) & ((2 ** 1) = 2) & ((2 ** 2) = 4) & ((2 ** 3) = 8) & ((2 ** 4) = 16) & ((2 ** 5) = 32) & ((2 ** 6) = 64) & ((2 ** 7) = 128) & ((-2 ** 7) = -128) & ((2 ** 8) = 256) & ((2 ** 9) = 512) & ((2 ** 10) = 1024) & ((2 ** 11) = 2048) & ((2 ** 12) = 4096) & ((2 ** 13) = 8192) & ((2 ** 14) = 16384) & ((2 ** 15) = 32768) & ((2 ** 16) = 65536) & 
"Assertion is verified"
 => 
(card(BYTE) = 256)
END

&
THEORY RulesProBWellDefinednessProperties_1 IS 


	 /* Expression from (WellDefinednessProperties_1), it was added  in Tue Oct 07 10:38:43 BRT 2014
	  evaluated with ProB in 1843 milliseconds
	  Module Path:/media/B_Resources/Z80_ProB/BYTE_DEFINITION.mch */

	 
(b1 : BYTE) & 
"Well definedness"
 => 
(b1 : seq(ran(b1)))
END

&
THEORY RulesProBWellDefinednessProperties_36 IS 


	 /* Expression from (WellDefinednessProperties_36), it was added  in Tue Oct 07 10:38:45 BRT 2014
	  evaluated with ProB in 1827 milliseconds
	  Module Path:/media/B_Resources/Z80_ProB/BYTE_DEFINITION.mch */

	 
(bv : BYTE) & 
"Well definedness"
 => 
(0 <= ((((((((bv )(1) + (bv )(2)) + (bv )(3)) + (bv )(4)) + (bv )(5)) + (bv )(6)) + (bv )(7)) + (bv )(8)))
END

&
THEORY RulesProBWellDefinednessAssertions_1 IS 


	 /* Expression from (WellDefinednessAssertions_1), it was added  in Tue Oct 07 10:38:57 BRT 2014
	  evaluated with ProB in 1829 milliseconds
	  Module Path:/media/B_Resources/Z80_ProB/BYTE_DEFINITION.mch */

	 
!(bb).(((bb : BIT) => ((bit_not )(bb) = (1 - bb)))) & (dom(bit_and) = (BIT * BIT)) & (ran(bit_not) = BIT) & ((bit_not )(0) = 1) & ((bit_not )(1) = 0) & !(bb).(((bb : BIT) => ((bit_not )((bit_not )(bb)) = bb))) & (dom(bit_and) = (BIT * BIT)) & (ran(bit_and) = BIT) & ((bit_and )((0 , 0)) = 0) & ((bit_and )((0 , 1)) = 0) & ((bit_and )((1 , 0)) = 0) & ((bit_and )((1 , 1)) = 1) & !(b1,b2).(((b1 : BIT) & (b2 : BIT) => ((bit_and )((b1 , b2)) = (bit_and )((b2 , b1))))) & !(b1,b2).(((b1 : BIT) & (b2 : BIT) & ((bit_and )((b1 , b2)) = 1) => ((bit_and )((b2 , b1)) = 1))) & !(b1,b2).(((b1 : BIT) & (b2 : BIT) & ((bit_and )((b1 , b2)) = 0) => ((bit_and )((b2 , b1)) = 0))) & !(b1,b2,b3).(((b1 : BIT) & (b2 : BIT) & (b3 : BIT) => ((bit_and )((b1 , (bit_and )((b2 , b3)))) = (bit_and )(((bit_and )((b1 , b2)) , b3))))) & !(b1).(((b1 : BIT) => ((bit_and )((b1 , 1)) = b1))) & !(b1).(((b1 : BIT) => ((bit_and )((b1 , 0)) = 0))) & (dom(bit_or) = (BIT * BIT)) & (ran(bit_or) = BIT) & ((bit_or )((0 , 0)) = 0) & ((bit_or )((0 , 1)) = 1) & ((bit_or )((1 , 0)) = 1) & ((bit_or )((1 , 1)) = 1) & !(b1,b2).(((b1 : BIT) & (b2 : BIT) => ((bit_or )((b1 , b2)) = (bit_or )((b2 , b1))))) & !(b1,b2).(((b1 : BIT) & (b2 : BIT) & ((bit_or )((b1 , b2)) = 1) => ((bit_or )((b2 , b1)) = 1))) & !(b1,b2).(((b1 : BIT) & (b2 : BIT) & ((bit_or )((b1 , b2)) = 0) => ((bit_or )((b2 , b1)) = 0))) & !(b1,b2).(((b1 : BIT) & (b2 : BIT) & ((bit_or )((b1 , 0)) = 1) => (b1 = 1))) & !(b1,b2).(((b1 : BIT) & (b2 : BIT) & ((bit_or )((b1 , 0)) = 0) => (b1 = 0))) & !(b1,b2,b3).(((b1 : BIT) & (b2 : BIT) & (b3 : BIT) => ((bit_or )((b1 , (bit_or )((b2 , b3)))) = (bit_or )(((bit_or )((b1 , b2)) , b3))))) & !(b1,b2,b3).(((b1 : BIT) & (b2 : BIT) & (b3 : BIT) & ((bit_or )((b1 , b2)) = 1) => ((bit_or )((b1 , (bit_or )((b2 , b3)))) = 1))) & !(b1,b2,b3).(((b1 : BIT) & (b2 : BIT) & (b3 : BIT) & ((bit_or )((b1 , b2)) = 1) => ((bit_or )((b1 , (bit_or )((b2 , b3)))) = (bit_or )((1 , b3))))) & !(b1).(((b1 : BIT) => ((bit_or )((b1 , 1)) = 1))) & !(b1).(((b1 : BIT) => ((bit_or )((b1 , 0)) = b1))) & !(b1).(((b1 : BIT) => ((bit_or )((1 , b1)) = 1))) & !(b1).(((b1 : BIT) => ((bit_or )((0 , b1)) = b1))) & (dom(bit_xor) = (BIT * BIT)) & (ran(bit_xor) = BIT) & ((bit_xor )((0 , 0)) = 0) & ((bit_xor )((0 , 1)) = 1) & ((bit_xor )((1 , 0)) = 1) & ((bit_xor )((1 , 1)) = 0) & !(b1,b2).(((b1 : BIT) & (b2 : BIT) => ((bit_xor )((b1 , b2)) = (bit_xor )((b2 , b1))))) & !(b1,b2).(((b1 : BIT) & (b2 : BIT) & ((bit_xor )((b1 , b2)) = 1) => ((bit_xor )((b2 , b1)) = 1))) & !(b1,b2).(((b1 : BIT) & (b2 : BIT) & ((bit_xor )((b1 , b2)) = 0) => ((bit_xor )((b2 , b1)) = 0))) & !(b1,b2,b3).(((b1 : BIT) & (b2 : BIT) & (b3 : BIT) => ((bit_xor )((b1 , (bit_xor )((b2 , b3)))) = (bit_xor )(((bit_xor )((b1 , b2)) , b3))))) & !(b1,b2,b3).(((b1 : BIT) & (b2 : BIT) & (b3 : BIT) & ((bit_xor )((b1 , b2)) = 1) => ((bit_xor )((b1 , (bit_xor )((b2 , b3)))) = (bit_xor )((1 , b3))))) & !(bb).(((bb : BIT) => ((bit_xor )((bb , bb)) = 0))) & (dom(bool_bit) = BOOL) & (ran(bit_xor) = BIT) & ((bool_bit )(TRUE) = 1) & ((bool_bit )(FALSE) = 0) & !(bb).(((bb : BIT) => ((bb = 0) or (bb = 1)))) & !(bb).(((bb : BIT) & not((bb = 0)) => (bb = 1))) & !(bb).(((bb : BIT) & not((bb = 1)) => (bb = 0))) & ((2 ** 0) = 1) & ((2 ** 1) = 2) & ((2 ** 2) = 4) & ((2 ** 3) = 8) & ((2 ** 4) = 16) & ((2 ** 5) = 32) & ((2 ** 6) = 64) & ((2 ** 7) = 128) & ((-2 ** 7) = -128) & ((2 ** 8) = 256) & ((2 ** 9) = 512) & ((2 ** 10) = 1024) & ((2 ** 11) = 2048) & ((2 ** 12) = 4096) & ((2 ** 13) = 8192) & ((2 ** 14) = 16384) & ((2 ** 15) = 32768) & ((2 ** 16) = 65536) & 
"Well definedness"
 => 
(BYTE : FIN(BYTE))
END

&
THEORY RulesProBWellDefinednessAssertions_2 IS 


	 /* Expression from (WellDefinednessAssertions_2), it was added  in Tue Oct 07 10:38:59 BRT 2014
	  evaluated with ProB in 1747 milliseconds
	  Module Path:/media/B_Resources/Z80_ProB/BYTE_DEFINITION.mch */

	 
(bt : BYTE) & 
"Well definedness"
 => 
(bt : seq(ran(bt)))
END

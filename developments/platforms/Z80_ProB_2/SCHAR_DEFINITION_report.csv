"2","/Users/valerio/Dropbox/B_Resources/Z80_ProBTese/SCHAR_DEFINITION.mch -init -p BOOL_AS_PREDICATE TRUE 
-p CLPFD TRUE 
-p MAXINT 2147483647 
-p MININT -2147483647 
-p SYMBOLIC TRUE -p TIME_OUT 12000 ","Common","Full","(
!(bb).(((((bb) : (BIT))) => ((((bit_not )(bb)) = ((1 - bb)))))) & ((dom(bit_and)) = ((BIT * BIT))) & ((ran(bit_not)) = (BIT)) & (((bit_not )(0)) = (1)) & (((bit_not )(1)) = (0)) & !(bb).(((((bb) : (BIT))) => ((((bit_not )((bit_not )(bb))) = (bb))))) & ((dom(bit_and)) = ((BIT * BIT))) & ((ran(bit_and)) = (BIT)) & (((bit_and )(((0) |-> (0)))) = (0)) & (((bit_and )(((0) |-> (1)))) = (0)) & (((bit_and )(((1) |-> (0)))) = (0)) & (((bit_and )(((1) |-> (1)))) = (1)) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT))) => ((((bit_and )(((b1) |-> (b2)))) = ((bit_and )(((b2) |-> (b1)))))))) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT)) & (((bit_and )(((b1) |-> (b2)))) = (1))) => ((((bit_and )(((b2) |-> (b1)))) = (1))))) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT)) & (((bit_and )(((b1) |-> (b2)))) = (0))) => ((((bit_and )(((b2) |-> (b1)))) = (0))))) & !(b1,b2,b3).(((((b1) : (BIT)) & ((b2) : (BIT)) & ((b3) : (BIT))) => ((((bit_and )(((b1) |-> ((bit_and )(((b2) |-> (b3))))))) = ((bit_and )((((bit_and )(((b1) |-> (b2)))) |-> (b3)))))))) & !(b1).(((((b1) : (BIT))) => ((((bit_and )(((b1) |-> (1)))) = (b1))))) & !(b1).(((((b1) : (BIT))) => ((((bit_and )(((b1) |-> (0)))) = (0))))) & ((dom(bit_or)) = ((BIT * BIT))) & ((ran(bit_or)) = (BIT)) & (((bit_or )(((0) |-> (0)))) = (0)) & (((bit_or )(((0) |-> (1)))) = (1)) & (((bit_or )(((1) |-> (0)))) = (1)) & (((bit_or )(((1) |-> (1)))) = (1)) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT))) => ((((bit_or )(((b1) |-> (b2)))) = ((bit_or )(((b2) |-> (b1)))))))) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT)) & (((bit_or )(((b1) |-> (b2)))) = (1))) => ((((bit_or )(((b2) |-> (b1)))) = (1))))) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT)) & (((bit_or )(((b1) |-> (b2)))) = (0))) => ((((bit_or )(((b2) |-> (b1)))) = (0))))) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT)) & (((bit_or )(((b1) |-> (0)))) = (1))) => (((b1) = (1))))) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT)) & (((bit_or )(((b1) |-> (0)))) = (0))) => (((b1) = (0))))) & !(b1,b2,b3).(((((b1) : (BIT)) & ((b2) : (BIT)) & ((b3) : (BIT))) => ((((bit_or )(((b1) |-> ((bit_or )(((b2) |-> (b3))))))) = ((bit_or )((((bit_or )(((b1) |-> (b2)))) |-> (b3)))))))) & !(b1,b2,b3).(((((b1) : (BIT)) & ((b2) : (BIT)) & ((b3) : (BIT)) & (((bit_or )(((b1) |-> (b2)))) = (1))) => ((((bit_or )(((b1) |-> ((bit_or )(((b2) |-> (b3))))))) = (1))))) & !(b1,b2,b3).(((((b1) : (BIT)) & ((b2) : (BIT)) & ((b3) : (BIT)) & (((bit_or )(((b1) |-> (b2)))) = (1))) => ((((bit_or )(((b1) |-> ((bit_or )(((b2) |-> (b3))))))) = ((bit_or )(((1) |-> (b3)))))))) & !(b1).(((((b1) : (BIT))) => ((((bit_or )(((b1) |-> (1)))) = (1))))) & !(b1).(((((b1) : (BIT))) => ((((bit_or )(((b1) |-> (0)))) = (b1))))) & !(b1).(((((b1) : (BIT))) => ((((bit_or )(((1) |-> (b1)))) = (1))))) & !(b1).(((((b1) : (BIT))) => ((((bit_or )(((0) |-> (b1)))) = (b1))))) & ((dom(bit_xor)) = ((BIT * BIT))) & ((ran(bit_xor)) = (BIT)) & (((bit_xor )(((0) |-> (0)))) = (0)) & (((bit_xor )(((0) |-> (1)))) = (1)) & (((bit_xor )(((1) |-> (0)))) = (1)) & (((bit_xor )(((1) |-> (1)))) = (0)) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT))) => ((((bit_xor )(((b1) |-> (b2)))) = ((bit_xor )(((b2) |-> (b1)))))))) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT)) & (((bit_xor )(((b1) |-> (b2)))) = (1))) => ((((bit_xor )(((b2) |-> (b1)))) = (1))))) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT)) & (((bit_xor )(((b1) |-> (b2)))) = (0))) => ((((bit_xor )(((b2) |-> (b1)))) = (0))))) & !(b1,b2,b3).(((((b1) : (BIT)) & ((b2) : (BIT)) & ((b3) : (BIT))) => ((((bit_xor )(((b1) |-> ((bit_xor )(((b2) |-> (b3))))))) = ((bit_xor )((((bit_xor )(((b1) |-> (b2)))) |-> (b3)))))))) & !(b1,b2,b3).(((((b1) : (BIT)) & ((b2) : (BIT)) & ((b3) : (BIT)) & (((bit_xor )(((b1) |-> (b2)))) = (1))) => ((((bit_xor )(((b1) |-> ((bit_xor )(((b2) |-> (b3))))))) = ((bit_xor )(((1) |-> (b3)))))))) & !(bb).(((((bb) : (BIT))) => ((((bit_xor )(((bb) |-> (bb)))) = (0))))) & ((dom(bool_bit)) = (BOOL)) & ((ran(bit_xor)) = (BIT)) & (((bool_bit )(TRUE)) = (1)) & (((bool_bit )(FALSE)) = (0)) & !(bb).(((((bb) : (BIT))) => (((((bb) = (0))) or (((bb) = (1))))))) & !(bb).(((((bb) : (BIT)) & not(((bb) = (0)))) => (((bb) = (1))))) & !(bb).(((((bb) : (BIT)) & not(((bb) = (1)))) => (((bb) = (0))))) & ((card(BYTE)) = (256)) & is_zero : BYTE +-> BIT & dom(is_zero) = BYTE & ((is_zero) : (((BYTE) --> (BIT)))) & parity_even : BYTE +-> BIT & dom(parity_even) = BYTE & ((parity_even) : (((BYTE) --> (BIT)))) & bv8_and : (BYTE * BYTE) +-> BYTE & dom(bv8_and) = (BYTE * BYTE) & ((bv8_and) : ((((BYTE * BYTE)) --> (BYTE)))) & bv8_or : (BYTE * BYTE) +-> BYTE & dom(bv8_or) = (BYTE * BYTE) & ((bv8_or) : ((((BYTE * BYTE)) --> (BYTE)))) & bv8_xor : (BYTE * BYTE) +-> BYTE & dom(bv8_xor) = (BYTE * BYTE) & ((bv8_xor) : ((((BYTE * BYTE)) --> (BYTE)))) & complement : BYTE +-> BYTE & dom(complement) = BYTE & ((complement) : (((BYTE) --> (BYTE)))) & swap : BYTE +-> BYTE & dom(swap) = BYTE & ((swap) : (((BYTE) --> (BYTE)))) & rotateleft : BYTE +-> BYTE & dom(rotateleft) = BYTE & ((rotateleft) : (((BYTE) --> (BYTE)))) & rotateright : BYTE +-> BYTE & dom(rotateright) = BYTE & ((rotateright) : (((BYTE) --> (BYTE)))) & !(bt).(((((bt) : (BYTE))) => (((size(bt)) = (8))))) & 8 : INTEGER & 0 <= 8 & ((8) : (NATURAL)) & ((dom(is_zero)) = (BYTE)) & ran(is_zero) : POW( BIT) & ((dom(parity_even)) = (BYTE)) & ran(parity_even) : POW( BIT) & bv8_and : (BYTE * BYTE) +-> BYTE & dom(bv8_and) = (BYTE * BYTE) & ((bv8_and) : ((((BYTE * BYTE)) --> (BYTE)))) & ((dom(complement)) = (BYTE)) & ran(complement) : POW( BYTE) & ((dom(swap)) = (BYTE)) & ran(swap) : POW( BYTE) & ((dom(rotateleft)) = (BYTE)) & ran(rotateleft) : POW( BYTE) & ((dom(rotateright)) = (BYTE)) & ran(rotateright) : POW( BYTE) & ((dom(get_upper_digit)) = (BYTE)) & ran(get_upper_digit) : POW( ((0) .. ((16 - 1)))) & ((dom(get_lower_digit)) = (BYTE)) & ran(get_lower_digit) : POW( ((0) .. ((16 - 1)))) & (([1,1,1,1,1,1,1,1]) : (BYTE)) & (([0,0,0,0,0,0,0,0]) : (BYTE)) & ((1) = ((2 ** 0))) & ((2) = ((2 ** 1))) & ((4) = ((2 ** 2))) & ((8) = ((2 ** 3))) & ((16) = ((2 ** 4))) & ((32) = ((2 ** 5))) & ((64) = ((2 ** 6))) & ((128) = ((2 ** 7))) & ((256) = ((2 ** 8))) & ((512) = ((2 ** 9))) & ((1024) = ((2 ** 10))) & ((2048) = ((2 ** 11))) & ((4096) = ((2 ** 12))) & ((8192) = ((2 ** 13))) & ((16384) = ((2 ** 14))) & ((32768) = ((2 ** 15))) & ((65536) = ((2 ** 16))) & ((card(byte_uchar)) = (256)) & ((card(uchar_byte)) = (256)) & ((UCHAR_MAX) : (INTEGER)) & ((UCHAR_MIN) : (INTEGER)) & ((1) = ((2 ** 0))) & ((2) = ((2 ** 1))) & ((4) = ((2 ** 2))) & ((8) = ((2 ** 3))) & ((16) = ((2 ** 4))) & ((32) = ((2 ** 5))) & ((64) = ((2 ** 6))) & ((128) = ((2 ** 7))) & ((256) = ((2 ** 8))) & (((2 ** 0)) = (1)) & (((2 ** 1)) = (2)) & (((2 ** 2)) = (4)) & (((2 ** 3)) = (8)) & (((2 ** 4)) = (16)) & (((2 ** 5)) = (32)) & (((2 ** 6)) = (64)) & (((2 ** 7)) = (128)) & (((-2 ** 7)) = (-128)) & (((2 ** 8)) = (256)) & (((2 ** 9)) = (512)) & (((2 ** 10)) = (1024)) & (((2 ** 11)) = (2048)) & (((2 ** 12)) = (4096)) & (((2 ** 13)) = (8192)) & (((2 ** 14)) = (16384)) & (((2 ** 15)) = (32768)) & (((2 ** 16)) = (65536)) & 
btrue
 => 
((card(schar_byte)) = (256)))","  Unproved","UNKNOWN","UNKNOWN","3121"
"16","/Users/valerio/Dropbox/B_Resources/Z80_ProBTese/SCHAR_DEFINITION.mch -init -p BOOL_AS_PREDICATE TRUE 
-p CLPFD TRUE 
-p MAXINT 2147483647 
-p MININT -2147483647 
-p SYMBOLIC TRUE -p TIME_OUT 12000 ","Common","Full","(
!(bb).(((((bb) : (BIT))) => ((((bit_not )(bb)) = ((1 - bb)))))) & ((dom(bit_and)) = ((BIT * BIT))) & ((ran(bit_not)) = (BIT)) & (((bit_not )(0)) = (1)) & (((bit_not )(1)) = (0)) & !(bb).(((((bb) : (BIT))) => ((((bit_not )((bit_not )(bb))) = (bb))))) & ((dom(bit_and)) = ((BIT * BIT))) & ((ran(bit_and)) = (BIT)) & (((bit_and )(((0) |-> (0)))) = (0)) & (((bit_and )(((0) |-> (1)))) = (0)) & (((bit_and )(((1) |-> (0)))) = (0)) & (((bit_and )(((1) |-> (1)))) = (1)) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT))) => ((((bit_and )(((b1) |-> (b2)))) = ((bit_and )(((b2) |-> (b1)))))))) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT)) & (((bit_and )(((b1) |-> (b2)))) = (1))) => ((((bit_and )(((b2) |-> (b1)))) = (1))))) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT)) & (((bit_and )(((b1) |-> (b2)))) = (0))) => ((((bit_and )(((b2) |-> (b1)))) = (0))))) & !(b1,b2,b3).(((((b1) : (BIT)) & ((b2) : (BIT)) & ((b3) : (BIT))) => ((((bit_and )(((b1) |-> ((bit_and )(((b2) |-> (b3))))))) = ((bit_and )((((bit_and )(((b1) |-> (b2)))) |-> (b3)))))))) & !(b1).(((((b1) : (BIT))) => ((((bit_and )(((b1) |-> (1)))) = (b1))))) & !(b1).(((((b1) : (BIT))) => ((((bit_and )(((b1) |-> (0)))) = (0))))) & ((dom(bit_or)) = ((BIT * BIT))) & ((ran(bit_or)) = (BIT)) & (((bit_or )(((0) |-> (0)))) = (0)) & (((bit_or )(((0) |-> (1)))) = (1)) & (((bit_or )(((1) |-> (0)))) = (1)) & (((bit_or )(((1) |-> (1)))) = (1)) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT))) => ((((bit_or )(((b1) |-> (b2)))) = ((bit_or )(((b2) |-> (b1)))))))) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT)) & (((bit_or )(((b1) |-> (b2)))) = (1))) => ((((bit_or )(((b2) |-> (b1)))) = (1))))) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT)) & (((bit_or )(((b1) |-> (b2)))) = (0))) => ((((bit_or )(((b2) |-> (b1)))) = (0))))) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT)) & (((bit_or )(((b1) |-> (0)))) = (1))) => (((b1) = (1))))) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT)) & (((bit_or )(((b1) |-> (0)))) = (0))) => (((b1) = (0))))) & !(b1,b2,b3).(((((b1) : (BIT)) & ((b2) : (BIT)) & ((b3) : (BIT))) => ((((bit_or )(((b1) |-> ((bit_or )(((b2) |-> (b3))))))) = ((bit_or )((((bit_or )(((b1) |-> (b2)))) |-> (b3)))))))) & !(b1,b2,b3).(((((b1) : (BIT)) & ((b2) : (BIT)) & ((b3) : (BIT)) & (((bit_or )(((b1) |-> (b2)))) = (1))) => ((((bit_or )(((b1) |-> ((bit_or )(((b2) |-> (b3))))))) = (1))))) & !(b1,b2,b3).(((((b1) : (BIT)) & ((b2) : (BIT)) & ((b3) : (BIT)) & (((bit_or )(((b1) |-> (b2)))) = (1))) => ((((bit_or )(((b1) |-> ((bit_or )(((b2) |-> (b3))))))) = ((bit_or )(((1) |-> (b3)))))))) & !(b1).(((((b1) : (BIT))) => ((((bit_or )(((b1) |-> (1)))) = (1))))) & !(b1).(((((b1) : (BIT))) => ((((bit_or )(((b1) |-> (0)))) = (b1))))) & !(b1).(((((b1) : (BIT))) => ((((bit_or )(((1) |-> (b1)))) = (1))))) & !(b1).(((((b1) : (BIT))) => ((((bit_or )(((0) |-> (b1)))) = (b1))))) & ((dom(bit_xor)) = ((BIT * BIT))) & ((ran(bit_xor)) = (BIT)) & (((bit_xor )(((0) |-> (0)))) = (0)) & (((bit_xor )(((0) |-> (1)))) = (1)) & (((bit_xor )(((1) |-> (0)))) = (1)) & (((bit_xor )(((1) |-> (1)))) = (0)) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT))) => ((((bit_xor )(((b1) |-> (b2)))) = ((bit_xor )(((b2) |-> (b1)))))))) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT)) & (((bit_xor )(((b1) |-> (b2)))) = (1))) => ((((bit_xor )(((b2) |-> (b1)))) = (1))))) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT)) & (((bit_xor )(((b1) |-> (b2)))) = (0))) => ((((bit_xor )(((b2) |-> (b1)))) = (0))))) & !(b1,b2,b3).(((((b1) : (BIT)) & ((b2) : (BIT)) & ((b3) : (BIT))) => ((((bit_xor )(((b1) |-> ((bit_xor )(((b2) |-> (b3))))))) = ((bit_xor )((((bit_xor )(((b1) |-> (b2)))) |-> (b3)))))))) & !(b1,b2,b3).(((((b1) : (BIT)) & ((b2) : (BIT)) & ((b3) : (BIT)) & (((bit_xor )(((b1) |-> (b2)))) = (1))) => ((((bit_xor )(((b1) |-> ((bit_xor )(((b2) |-> (b3))))))) = ((bit_xor )(((1) |-> (b3)))))))) & !(bb).(((((bb) : (BIT))) => ((((bit_xor )(((bb) |-> (bb)))) = (0))))) & ((dom(bool_bit)) = (BOOL)) & ((ran(bit_xor)) = (BIT)) & (((bool_bit )(TRUE)) = (1)) & (((bool_bit )(FALSE)) = (0)) & !(bb).(((((bb) : (BIT))) => (((((bb) = (0))) or (((bb) = (1))))))) & !(bb).(((((bb) : (BIT)) & not(((bb) = (0)))) => (((bb) = (1))))) & !(bb).(((((bb) : (BIT)) & not(((bb) = (1)))) => (((bb) = (0))))) & ((card(BYTE)) = (256)) & is_zero : BYTE +-> BIT & dom(is_zero) = BYTE & ((is_zero) : (((BYTE) --> (BIT)))) & parity_even : BYTE +-> BIT & dom(parity_even) = BYTE & ((parity_even) : (((BYTE) --> (BIT)))) & bv8_and : (BYTE * BYTE) +-> BYTE & dom(bv8_and) = (BYTE * BYTE) & ((bv8_and) : ((((BYTE * BYTE)) --> (BYTE)))) & bv8_or : (BYTE * BYTE) +-> BYTE & dom(bv8_or) = (BYTE * BYTE) & ((bv8_or) : ((((BYTE * BYTE)) --> (BYTE)))) & bv8_xor : (BYTE * BYTE) +-> BYTE & dom(bv8_xor) = (BYTE * BYTE) & ((bv8_xor) : ((((BYTE * BYTE)) --> (BYTE)))) & complement : BYTE +-> BYTE & dom(complement) = BYTE & ((complement) : (((BYTE) --> (BYTE)))) & swap : BYTE +-> BYTE & dom(swap) = BYTE & ((swap) : (((BYTE) --> (BYTE)))) & rotateleft : BYTE +-> BYTE & dom(rotateleft) = BYTE & ((rotateleft) : (((BYTE) --> (BYTE)))) & rotateright : BYTE +-> BYTE & dom(rotateright) = BYTE & ((rotateright) : (((BYTE) --> (BYTE)))) & !(bt).(((((bt) : (BYTE))) => (((size(bt)) = (8))))) & 8 : INTEGER & 0 <= 8 & ((8) : (NATURAL)) & ((dom(is_zero)) = (BYTE)) & ran(is_zero) : POW( BIT) & ((dom(parity_even)) = (BYTE)) & ran(parity_even) : POW( BIT) & bv8_and : (BYTE * BYTE) +-> BYTE & dom(bv8_and) = (BYTE * BYTE) & ((bv8_and) : ((((BYTE * BYTE)) --> (BYTE)))) & ((dom(complement)) = (BYTE)) & ran(complement) : POW( BYTE) & ((dom(swap)) = (BYTE)) & ran(swap) : POW( BYTE) & ((dom(rotateleft)) = (BYTE)) & ran(rotateleft) : POW( BYTE) & ((dom(rotateright)) = (BYTE)) & ran(rotateright) : POW( BYTE) & ((dom(get_upper_digit)) = (BYTE)) & ran(get_upper_digit) : POW( ((0) .. ((16 - 1)))) & ((dom(get_lower_digit)) = (BYTE)) & ran(get_lower_digit) : POW( ((0) .. ((16 - 1)))) & (([1,1,1,1,1,1,1,1]) : (BYTE)) & (([0,0,0,0,0,0,0,0]) : (BYTE)) & ((1) = ((2 ** 0))) & ((2) = ((2 ** 1))) & ((4) = ((2 ** 2))) & ((8) = ((2 ** 3))) & ((16) = ((2 ** 4))) & ((32) = ((2 ** 5))) & ((64) = ((2 ** 6))) & ((128) = ((2 ** 7))) & ((256) = ((2 ** 8))) & ((512) = ((2 ** 9))) & ((1024) = ((2 ** 10))) & ((2048) = ((2 ** 11))) & ((4096) = ((2 ** 12))) & ((8192) = ((2 ** 13))) & ((16384) = ((2 ** 14))) & ((32768) = ((2 ** 15))) & ((65536) = ((2 ** 16))) & ((card(byte_uchar)) = (256)) & ((card(uchar_byte)) = (256)) & ((UCHAR_MAX) : (INTEGER)) & ((UCHAR_MIN) : (INTEGER)) & ((1) = ((2 ** 0))) & ((2) = ((2 ** 1))) & ((4) = ((2 ** 2))) & ((8) = ((2 ** 3))) & ((16) = ((2 ** 4))) & ((32) = ((2 ** 5))) & ((64) = ((2 ** 6))) & ((128) = ((2 ** 7))) & ((256) = ((2 ** 8))) & (((2 ** 0)) = (1)) & (((2 ** 1)) = (2)) & (((2 ** 2)) = (4)) & (((2 ** 3)) = (8)) & (((2 ** 4)) = (16)) & (((2 ** 5)) = (32)) & (((2 ** 6)) = (64)) & (((2 ** 7)) = (128)) & (((-2 ** 7)) = (-128)) & (((2 ** 8)) = (256)) & (((2 ** 9)) = (512)) & (((2 ** 10)) = (1024)) & (((2 ** 11)) = (2048)) & (((2 ** 12)) = (4096)) & (((2 ** 13)) = (8192)) & (((2 ** 14)) = (16384)) & (((2 ** 15)) = (32768)) & (((2 ** 16)) = (65536)) & 
btrue
 => 
((byte_schar) : (FIN(byte_schar))))","  Unproved","UNKNOWN","UNKNOWN","3037"
"17","/Users/valerio/Dropbox/B_Resources/Z80_ProBTese/SCHAR_DEFINITION.mch -init -p BOOL_AS_PREDICATE TRUE 
-p CLPFD TRUE 
-p MAXINT 2147483647 
-p MININT -2147483647 
-p SYMBOLIC TRUE -p TIME_OUT 12000 ","Common","Full","(
((card(byte_schar)) = (256)) & 
btrue
 => 
((schar_byte) : (FIN(schar_byte)))
)","  Unproved","UNKNOWN","UNKNOWN","3077"
"Number of verified with AtelierB:0","Number Of verified with A telierB not automatically:0","Number of verified with ProB automatically:0","Number of ProB disproved:0","Number of ProB errors:0","Number of total POs:3"

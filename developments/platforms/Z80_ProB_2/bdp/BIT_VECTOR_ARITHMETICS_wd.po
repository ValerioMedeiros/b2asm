
THEORY ProofList IS
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.2,(_f(42) => _f(43));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.1,(_f(40) => _f(41));
_f(5) & _f(4) & Properties.14,(_f(38) => _f(39));
_f(5) & _f(4) & Properties.13,(_f(36) => _f(37));
_f(5) & _f(4) & Properties.12,(_f(34) => _f(35));
_f(5) & _f(4) & Properties.11,(_f(32) => _f(33));
_f(5) & _f(4) & Properties.10,(_f(30) => _f(31));
_f(5) & _f(4) & Properties.9,(_f(28) => _f(29));
_f(5) & _f(4) & Properties.8,(_f(26) => _f(27));
_f(5) & _f(4) & Properties.7,(_f(24) => _f(25));
_f(5) & _f(4) & Properties.6,(_f(22) => _f(23));
_f(5) & _f(4) & Properties.5,(_f(20) => _f(21));
_f(5) & _f(4) & Properties.4,(_f(18) => _f(19));
_f(5) & _f(4) & Properties.3,(_f(16) => _f(17));
_f(5) & _f(4) & Properties.2,(_f(14) => _f(15));
_f(5) & _f(4) & Properties.1,(_f(12) => _f(13))

END
&

THEORY Formulas IS
("`Component constraints'" & btrue);
("`Used machines constraints'" & btrue);
("`Component properties'" & bv_nat: BIT_VECTOR +-> NATURAL & dom(bv_nat) = BIT_VECTOR & bv_nat = %bv.(bv: BIT_VECTOR | SIGMA(idx).(idx: dom(bv) | 2**idx*bv(idx))) & nat_bv: (1..16)*USHORT +-> BIT_VECTOR & nat_bv = %(ii,nn).(ii: 2..16 & nn: 0..65535 | {ii|->nn mod 2**ii/2**(ii-1)}\/nat_bv(ii-1,nn))\/%(ii,nn).(ii: 1..1 & nn: 0..65535 | {1|->nn mod 2**1/2**0}) & bv_even: BIT_VECTOR +-> BIT & dom(bv_even) = BIT_VECTOR & bv_even = %bv.(bv: BIT_VECTOR | 1-size(bv|>{1}) mod 2));
("`Seen and used machines properties'" & BIT = {0}\/{1} & bit_not: BIT +-> BIT & bit_not~: BIT +-> BIT & dom(bit_not) = BIT & ran(bit_not) = BIT & bit_not = {0|->1}\/{1|->0} & bit_and: BIT*BIT +-> BIT & dom(bit_and) = BIT*BIT & bit_and = {(0,0)|->0}\/{(0,1)|->0}\/{(1,0)|->0}\/{(1,1)|->1} & bit_or: BIT*BIT +-> BIT & dom(bit_or) = BIT*BIT & bit_or = {(0,0)|->0}\/{(0,1)|->1}\/{(1,0)|->1}\/{(1,1)|->1} & bit_xor: BIT*BIT +-> BIT & dom(bit_xor) = BIT*BIT & bit_xor = {(0,0)|->0}\/{(0,1)|->1}\/{(1,0)|->1}\/{(1,1)|->0} & bool_bit = {TRUE|->1}\/{FALSE|->0} & BYTE_INDEX = 1..8 & PHYS_BYTE_INDEX = 0..7 & BYTE = BYTE_INDEX --> BIT & !b1.(b1: BYTE => size(b1) = 8 & b1: seq(BIT) & not(b1 = {})) & is_zero: BYTE +-> BIT & dom(is_zero) = BYTE & is_zero = %w1.(w1: BYTE | bool_bit(bool(w1(1) = w1(2) & w1(2) = w1(3) & w1(3) = w1(4) & w1(4) = w1(5) & w1(5) = w1(6) & w1(6) = w1(7) & w1(7) = w1(8) & w1(8) = 0))) & parity_even: BYTE +-> BIT & dom(parity_even) = BYTE & parity_even = %bv.(bv: BYTE | 1-(bv(1)+bv(2)+bv(3)+bv(4)+bv(5)+bv(6)+bv(7)+bv(8)) mod 2) & bv8_and = %(bt1,bt2).(bt1: BYTE & bt2: BYTE | %idx.(idx: 1..8 | bit_and(bt1(idx),bt2(idx)))) & bv8_or = %(bt1,bt2).(bt1: BYTE & bt2: BYTE | %idx.(idx: 1..8 | bit_or(bt1(idx),bt2(idx)))) & bv8_xor = %(bt1,bt2).(bt1: BYTE & bt2: BYTE | %idx.(idx: 1..8 | bit_xor(bt1(idx),bt2(idx)))) & bv8get: BYTE*PHYS_BYTE_INDEX +-> BIT & dom(bv8get) = BYTE*PHYS_BYTE_INDEX & bv8get = %(bt1,ii).(bt1: BYTE & ii: PHYS_BYTE_INDEX | bt1(ii+1)) & bitset: BYTE*PHYS_BYTE_INDEX +-> BYTE & dom(bitset) = BYTE*PHYS_BYTE_INDEX & bitset = %(bt1,ii).(bt1: BYTE & ii: PHYS_BYTE_INDEX | bt1<+{ii+1|->1}) & bitclear: BYTE*PHYS_BYTE_INDEX +-> BYTE & dom(bitclear) = BYTE*PHYS_BYTE_INDEX & bitclear = %(bt1,ii).(bt1: BYTE & ii: PHYS_BYTE_INDEX | bt1<+{ii+1|->0}) & complement: BYTE +-> BYTE & dom(complement) = BYTE & complement = %bt.(bt: BYTE | %idx.(idx: 1..8 | bit_not(bt(idx)))) & swap: BYTE +-> BYTE & dom(swap) = BYTE & swap = %bt.(bt: BYTE | {1|->bt(5)}\/{2|->bt(6)}\/{3|->bt(7)}\/{4|->bt(8)}\/{5|->bt(1)}\/{6|->bt(2)}\/{7|->bt(3)}\/{8|->bt(4)}) & rotateleft: BYTE +-> BYTE & dom(rotateleft) = BYTE & rotateleft = %bv.(bv: BYTE | {1|->bv(8)}\/{2|->bv(1)}\/{3|->bv(2)}\/{4|->bv(3)}\/{5|->bv(4)}\/{6|->bv(5)}\/{7|->bv(6)}\/{8|->bv(7)}) & rotateright: BYTE +-> BYTE & dom(rotateright) = BYTE & rotateright = %bv.(bv: BYTE | {1|->bv(2)}\/{2|->bv(3)}\/{3|->bv(4)}\/{4|->bv(5)}\/{5|->bv(6)}\/{6|->bv(7)}\/{7|->bv(8)}\/{8|->bv(1)}) & get_upper_digit: BYTE +-> 0..15 & dom(get_upper_digit) = BYTE & get_upper_digit = %by.(by: BYTE | 8*by(8)+4*by(7)+2*by(6)+by(5)) & get_lower_digit: BYTE +-> 0..15 & dom(get_lower_digit) = BYTE & get_lower_digit = %by.(by: BYTE | 8*by(4)+4*by(3)+2*by(2)+by(1)) & UCHAR_MAX = 255 & UCHAR_MIN = 0 & UCHAR = UCHAR_MIN..UCHAR_MAX & byte_uchar = %v0.(v0: BYTE | 128*v0(8)+64*v0(7)+32*v0(6)+16*v0(5)+8*v0(4)+4*v0(3)+2*v0(2)+1*v0(1)) & uchar_byte = %v0.(v0: UCHAR | [v0 mod 2/1,v0 mod 4/2,v0 mod 8/4,v0 mod 16/8,v0 mod 32/16,v0 mod 64/32,v0 mod 128/64,v0 mod 256/128]) & USHORT_MAX = 65535 & USHORT_MIN = 0 & USHORT = USHORT_MIN..USHORT_MAX & bv16_ushort = %v0.(v0: BV16 | 32768*v0(16)+16384*v0(15)+8192*v0(14)+4096*v0(13)+2048*v0(12)+1024*v0(11)+512*v0(10)+256*v0(9)+128*v0(8)+64*v0(7)+32*v0(6)+16*v0(5)+8*v0(4)+4*v0(3)+2*v0(2)+1*v0(1)) & ushort_bv16 = %v0.(v0: USHORT | [v0 mod 2/1,v0 mod 4/2,v0 mod 8/4,v0 mod 16/8,v0 mod 32/16,v0 mod 64/32,v0 mod 128/64,v0 mod 256/128,v0 mod 512/256,v0 mod 1024/512,v0 mod 2048/1024,v0 mod 4096/2048,v0 mod 8192/4096,v0 mod 16384/8192,v0 mod 32768/16384,v0 mod 65536/32768]) & uchar_ushort = %(w1,w2).(w1: UCHAR & w2: UCHAR | bv16_ushort(byte_bv16(uchar_byte(w1),uchar_byte(w2)))) & BIT_VECTOR = seq(BIT)-{{}} & bv_size = %bv.(bv: BIT_VECTOR | size(bv)) & bv_catenate = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR | v1^v2) & phys_bv_index = %v1.(v1: BIT_VECTOR | 0..bv_size(v1)-1) & bv_sub = %(bv,low,high).(bv: BIT_VECTOR & low: 0..bv_size(bv)-1 & high: low..bv_size(bv)-1 | %i0.(i0: 1..high-low+1 | bv(i0+low))) & bv_not = %v1.(v1: BIT_VECTOR | %idx.(idx: 1..bv_size(v1) | bit_not(v1(idx)))) & bv_and = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) | %idx.(idx: 1..bv_size(v1) | bit_and(v1(idx),v2(idx)))) & bv_or = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) | %idx.(idx: 1..bv_size(v1) | bit_or(v1(idx),v2(idx)))) & bv_xor = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) | %idx.(idx: 1..bv_size(v1) | bit_xor(v1(idx),v2(idx)))) & bv_clear = %(v1,idx).(v1: BIT_VECTOR & idx: 0..bv_size(v1)-1 | v1<+{idx+1|->0}) & bv_set = %(v1,idx).(v1: BIT_VECTOR & idx: 0..bv_size(v1)-1 | v1<+{idx+1|->1}) & bv_get = %(v1,idx).(v1: BIT_VECTOR & idx: 0..bv_size(v1)-1 | v1(idx+1)) & bv_put = %(v1,idx,bit).(v1: BIT_VECTOR & idx: 0..bv_size(v1)-1 & bit: BIT | v1<+{idx+1|->bit}));
("`Included,imported and extended machines properties'" & btrue);
("`Component invariant'" & btrue);
("`Seen and used machines invariants'" & btrue);
("`Included,imported and extended machines invariants'" & btrue);
("`Component assertions'" & !val.(val: USHORT => bv_nat(nat_bv(16,val)) = val));
("`Seen and used machines assertions'" & !bb.(bb: BIT => bit_not(bb) = 1-bb) & dom(bit_and) = BIT*BIT & ran(bit_not) = BIT & bit_not(0) = 1 & bit_not(1) = 0 & !bb.(bb: BIT => bit_not(bit_not(bb)) = bb) & dom(bit_and) = BIT*BIT & ran(bit_and) = BIT & bit_and(0,0) = 0 & bit_and(0,1) = 0 & bit_and(1,0) = 0 & bit_and(1,1) = 1 & !(b1,b2).(b1: BIT & b2: BIT => bit_and(b1,b2) = bit_and(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_and(b1,b2) = 1 => bit_and(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_and(b1,b2) = 0 => bit_and(b2,b1) = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_and(b1,bit_and(b2,b3)) = bit_and(bit_and(b1,b2),b3)) & !b1.(b1: BIT => bit_and(b1,1) = b1) & !b1.(b1: BIT => bit_and(b1,0) = 0) & dom(bit_or) = BIT*BIT & ran(bit_or) = BIT & bit_or(0,0) = 0 & bit_or(0,1) = 1 & bit_or(1,0) = 1 & bit_or(1,1) = 1 & !(b1,b2).(b1: BIT & b2: BIT => bit_or(b1,b2) = bit_or(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,b2) = 1 => bit_or(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,b2) = 0 => bit_or(b2,b1) = 0) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,0) = 1 => b1 = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,0) = 0 => b1 = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_or(b1,bit_or(b2,b3)) = bit_or(bit_or(b1,b2),b3)) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_or(b1,b2) = 1 => bit_or(b1,bit_or(b2,b3)) = 1) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_or(b1,b2) = 1 => bit_or(b1,bit_or(b2,b3)) = bit_or(1,b3)) & !b1.(b1: BIT => bit_or(b1,1) = 1) & !b1.(b1: BIT => bit_or(b1,0) = b1) & !b1.(b1: BIT => bit_or(1,b1) = 1) & !b1.(b1: BIT => bit_or(0,b1) = b1) & dom(bit_xor) = BIT*BIT & ran(bit_xor) = BIT & bit_xor(0,0) = 0 & bit_xor(0,1) = 1 & bit_xor(1,0) = 1 & bit_xor(1,1) = 0 & !(b1,b2).(b1: BIT & b2: BIT => bit_xor(b1,b2) = bit_xor(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_xor(b1,b2) = 1 => bit_xor(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_xor(b1,b2) = 0 => bit_xor(b2,b1) = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_xor(b1,bit_xor(b2,b3)) = bit_xor(bit_xor(b1,b2),b3)) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_xor(b1,b2) = 1 => bit_xor(b1,bit_xor(b2,b3)) = bit_xor(1,b3)) & !bb.(bb: BIT => bit_xor(bb,bb) = 0) & dom(bool_bit) = BOOL & ran(bit_xor) = BIT & bool_bit(TRUE) = 1 & bool_bit(FALSE) = 0 & !bb.(bb: BIT => bb = 0 or bb = 1) & !bb.(bb: BIT & not(bb = 0) => bb = 1) & !bb.(bb: BIT & not(bb = 1) => bb = 0) & card(BYTE) = 256 & is_zero: BYTE +-> BIT & dom(is_zero) = BYTE & parity_even: BYTE +-> BIT & dom(parity_even) = BYTE & bv8_and: BYTE*BYTE +-> BYTE & dom(bv8_and) = BYTE*BYTE & bv8_or: BYTE*BYTE +-> BYTE & dom(bv8_or) = BYTE*BYTE & bv8_xor: BYTE*BYTE +-> BYTE & dom(bv8_xor) = BYTE*BYTE & complement: BYTE +-> BYTE & dom(complement) = BYTE & swap: BYTE +-> BYTE & dom(swap) = BYTE & rotateleft: BYTE +-> BYTE & dom(rotateleft) = BYTE & rotateright: BYTE +-> BYTE & dom(rotateright) = BYTE & !bt.(bt: BYTE => size(bt) = 8) & 8: INTEGER & btrue & dom(is_zero) = BYTE & ran(is_zero): POW(BIT) & dom(parity_even) = BYTE & ran(parity_even): POW(BIT) & bv8_and: BYTE*BYTE +-> BYTE & dom(bv8_and) = BYTE*BYTE & dom(complement) = BYTE & ran(complement): POW(BYTE) & dom(swap) = BYTE & ran(swap): POW(BYTE) & dom(rotateleft) = BYTE & ran(rotateleft): POW(BYTE) & dom(rotateright) = BYTE & ran(rotateright): POW(BYTE) & dom(get_upper_digit) = BYTE & ran(get_upper_digit): POW(0..15) & dom(get_lower_digit) = BYTE & ran(get_lower_digit): POW(0..15) & [1,1,1,1,1,1,1,1]: BYTE & [0,0,0,0,0,0,0,0]: BYTE & 1 = 2**0 & 2 = 2**1 & 4 = 2**2 & 8 = 2**3 & 16 = 2**4 & 32 = 2**5 & 64 = 2**6 & 128 = 2**7 & 256 = 2**8 & 512 = 2**9 & 1024 = 2**10 & 2048 = 2**11 & 4096 = 2**12 & 8192 = 2**13 & 16384 = 2**14 & 32768 = 2**15 & 65536 = 2**16 & card(byte_uchar) = 256 & card(uchar_byte) = 256 & UCHAR_MAX: INTEGER & UCHAR_MIN: INTEGER & 1 = 2**0 & 2 = 2**1 & 4 = 2**2 & 8 = 2**3 & 16 = 2**4 & 32 = 2**5 & 64 = 2**6 & 128 = 2**7 & 256 = 2**8 & card(bv16_ushort) = 65536 & card(ushort_bv16) = 65536 & USHORT_MAX: INTEGER & USHORT_MIN: INTEGER & 1 = 2**0 & 2 = 2**1 & 4 = 2**2 & 8 = 2**3 & 16 = 2**4 & 32 = 2**5 & 64 = 2**6 & 128 = 2**7 & 256 = 2**8 & 512 = 2**9 & 1024 = 2**10 & 2048 = 2**11 & 4096 = 2**12 & 8192 = 2**13 & 16384 = 2**14 & 32768 = 2**15 & 65536 = 2**16 & 2**0 = 1 & 2**1 = 2 & 2**2 = 4 & 2**3 = 8 & 2**4 = 16 & 2**5 = 32 & 2**6 = 64 & 2**7 = 128 & (-2)**7 = -128 & 2**8 = 256 & 2**9 = 512 & 2**10 = 1024 & 2**11 = 2048 & 2**12 = 4096 & 2**13 = 8192 & 2**14 = 16384 & 2**15 = 32768 & 2**16 = 65536);
("`Included,imported and extended machines assertions'" & btrue);
("`Local hypotheses'" & bv_nat: BIT_VECTOR +-> NATURAL & dom(bv_nat) = BIT_VECTOR & bv: BIT_VECTOR);
(SET(idx).(idx: dom(bv)): FIN(SET(idx).(idx: dom(bv))));
("`Local hypotheses'" & bv_nat: BIT_VECTOR +-> NATURAL & dom(bv_nat) = BIT_VECTOR & bv: BIT_VECTOR & idx: dom(bv));
(0<=idx);
("`Local hypotheses'" & bv_nat: BIT_VECTOR +-> NATURAL & dom(bv_nat) = BIT_VECTOR & bv: BIT_VECTOR & idx: dom(bv));
(bv: dom(bv) +-> ran(bv));
("`Local hypotheses'" & bv_nat: BIT_VECTOR +-> NATURAL & dom(bv_nat) = BIT_VECTOR & bv_nat = %bv.(bv: BIT_VECTOR | SIGMA(idx).(idx: dom(bv) | 2**idx*bv(idx))) & nat_bv: (1..16)*USHORT +-> BIT_VECTOR & ii: 2..16 & nn: 0..65535);
(0<=ii);
("`Local hypotheses'" & bv_nat: BIT_VECTOR +-> NATURAL & dom(bv_nat) = BIT_VECTOR & bv_nat = %bv.(bv: BIT_VECTOR | SIGMA(idx).(idx: dom(bv) | 2**idx*bv(idx))) & nat_bv: (1..16)*USHORT +-> BIT_VECTOR & ii: 2..16 & nn: 0..65535);
(0<=nn);
("`Local hypotheses'" & bv_nat: BIT_VECTOR +-> NATURAL & dom(bv_nat) = BIT_VECTOR & bv_nat = %bv.(bv: BIT_VECTOR | SIGMA(idx).(idx: dom(bv) | 2**idx*bv(idx))) & nat_bv: (1..16)*USHORT +-> BIT_VECTOR & ii: 2..16 & nn: 0..65535);
(1<=2**ii);
("`Local hypotheses'" & bv_nat: BIT_VECTOR +-> NATURAL & dom(bv_nat) = BIT_VECTOR & bv_nat = %bv.(bv: BIT_VECTOR | SIGMA(idx).(idx: dom(bv) | 2**idx*bv(idx))) & nat_bv: (1..16)*USHORT +-> BIT_VECTOR & ii: 2..16 & nn: 0..65535);
(0<=ii-1);
("`Local hypotheses'" & bv_nat: BIT_VECTOR +-> NATURAL & dom(bv_nat) = BIT_VECTOR & bv_nat = %bv.(bv: BIT_VECTOR | SIGMA(idx).(idx: dom(bv) | 2**idx*bv(idx))) & nat_bv: (1..16)*USHORT +-> BIT_VECTOR & ii: 2..16 & nn: 0..65535);
(not(2**(ii-1) = 0));
("`Local hypotheses'" & bv_nat: BIT_VECTOR +-> NATURAL & dom(bv_nat) = BIT_VECTOR & bv_nat = %bv.(bv: BIT_VECTOR | SIGMA(idx).(idx: dom(bv) | 2**idx*bv(idx))) & nat_bv: (1..16)*USHORT +-> BIT_VECTOR & ii: 2..16 & nn: 0..65535);
(ii-1,nn: dom(nat_bv));
("`Local hypotheses'" & bv_nat: BIT_VECTOR +-> NATURAL & dom(bv_nat) = BIT_VECTOR & bv_nat = %bv.(bv: BIT_VECTOR | SIGMA(idx).(idx: dom(bv) | 2**idx*bv(idx))) & nat_bv: (1..16)*USHORT +-> BIT_VECTOR & ii: 1..1 & nn: 0..65535);
(0<=nn);
("`Local hypotheses'" & bv_nat: BIT_VECTOR +-> NATURAL & dom(bv_nat) = BIT_VECTOR & bv_nat = %bv.(bv: BIT_VECTOR | SIGMA(idx).(idx: dom(bv) | 2**idx*bv(idx))) & nat_bv: (1..16)*USHORT +-> BIT_VECTOR & ii: 1..1 & nn: 0..65535);
(1<=2**1);
("`Local hypotheses'" & bv_nat: BIT_VECTOR +-> NATURAL & dom(bv_nat) = BIT_VECTOR & bv_nat = %bv.(bv: BIT_VECTOR | SIGMA(idx).(idx: dom(bv) | 2**idx*bv(idx))) & nat_bv: (1..16)*USHORT +-> BIT_VECTOR & ii: 1..1 & nn: 0..65535);
(not(2**0 = 0));
("`Local hypotheses'" & bv_nat: BIT_VECTOR +-> NATURAL & dom(bv_nat) = BIT_VECTOR & bv_nat = %bv.(bv: BIT_VECTOR | SIGMA(idx).(idx: dom(bv) | 2**idx*bv(idx))) & nat_bv: (1..16)*USHORT +-> BIT_VECTOR & nat_bv = %(ii,nn).(ii: 2..16 & nn: 0..65535 | {ii|->nn mod 2**ii/2**(ii-1)}\/nat_bv(ii-1,nn))\/%(ii,nn).(ii: 1..1 & nn: 0..65535 | {1|->nn mod 2**1/2**0}) & bv_even: BIT_VECTOR +-> BIT & dom(bv_even) = BIT_VECTOR & bv: BIT_VECTOR);
(bv|>{1}: seq(ran(bv|>{1})));
("`Local hypotheses'" & bv_nat: BIT_VECTOR +-> NATURAL & dom(bv_nat) = BIT_VECTOR & bv_nat = %bv.(bv: BIT_VECTOR | SIGMA(idx).(idx: dom(bv) | 2**idx*bv(idx))) & nat_bv: (1..16)*USHORT +-> BIT_VECTOR & nat_bv = %(ii,nn).(ii: 2..16 & nn: 0..65535 | {ii|->nn mod 2**ii/2**(ii-1)}\/nat_bv(ii-1,nn))\/%(ii,nn).(ii: 1..1 & nn: 0..65535 | {1|->nn mod 2**1/2**0}) & bv_even: BIT_VECTOR +-> BIT & dom(bv_even) = BIT_VECTOR & bv: BIT_VECTOR);
(0<=size(bv|>{1}));
("`Local hypotheses'" & val: USHORT);
(16,val: dom(nat_bv));
("`Local hypotheses'" & val: USHORT);
(nat_bv(16,val): dom(bv_nat))

END
&

THEORY EnumerateX 

END

THEORY ProofList IS
_f(1) & _f(2) & _f(3) & _f(4) & WellDefinednessAssertions.1,(_f(24) => _f(51));
_f(1) & _f(2) & WellDefinednessProperties.24,(_f(23) & _f(22) & _f(21) & _f(20) & _f(19) & _f(18) & _f(16) & _f(17) & _f(24) => _f(48));
_f(1) & _f(2) & WellDefinednessProperties.23,(_f(23) & _f(22) & _f(21) & _f(20) & _f(19) & _f(18) & _f(16) & _f(17) & _f(24) => _f(47));
_f(1) & _f(2) & WellDefinednessProperties.22,(_f(23) & _f(22) & _f(21) & _f(20) & _f(19) & _f(15) & _f(24) => _f(46));
_f(1) & _f(2) & WellDefinednessProperties.21,(_f(23) & _f(22) & _f(21) & _f(20) & _f(19) & _f(15) & _f(24) => _f(45));
_f(1) & _f(2) & WellDefinednessProperties.20,(_f(23) & _f(22) & _f(21) & _f(20) & _f(19) & _f(15) & _f(24) => _f(44));
_f(1) & _f(2) & WellDefinednessProperties.19,(_f(23) & _f(22) & _f(21) & _f(20) & _f(19) & _f(15) & _f(24) => _f(43));
_f(1) & _f(2) & WellDefinednessProperties.18,(_f(23) & _f(22) & _f(21) & _f(20) & _f(19) & _f(15) & _f(24) => _f(42));
_f(1) & _f(2) & WellDefinednessProperties.17,(_f(23) & _f(22) & _f(21) & _f(20) & _f(19) & _f(15) & _f(24) => _f(41));
_f(1) & _f(2) & WellDefinednessProperties.16,(_f(23) & _f(22) & _f(21) & _f(20) & _f(19) & _f(15) & _f(24) => _f(40));
_f(1) & _f(2) & WellDefinednessProperties.15,(_f(23) & _f(22) & _f(21) & _f(20) & _f(19) & _f(15) & _f(24) => _f(39));
_f(1) & _f(2) & WellDefinednessProperties.14,(_f(23) & _f(22) & _f(21) & _f(20) & _f(19) & _f(15) & _f(24) => _f(38));
_f(1) & _f(2) & WellDefinednessProperties.13,(_f(23) & _f(22) & _f(21) & _f(20) & _f(19) & _f(15) & _f(24) => _f(37));
_f(1) & _f(2) & WellDefinednessProperties.12,(_f(23) & _f(22) & _f(21) & _f(20) & _f(19) & _f(15) & _f(24) => _f(36));
_f(1) & _f(2) & WellDefinednessProperties.11,(_f(23) & _f(22) & _f(21) & _f(20) & _f(19) & _f(15) & _f(24) => _f(35));
_f(1) & _f(2) & WellDefinednessProperties.10,(_f(23) & _f(22) & _f(21) & _f(20) & _f(19) & _f(15) & _f(24) => _f(34));
_f(1) & _f(2) & WellDefinednessProperties.9,(_f(23) & _f(22) & _f(21) & _f(20) & _f(19) & _f(15) & _f(24) => _f(33));
_f(1) & _f(2) & WellDefinednessProperties.8,(_f(23) & _f(22) & _f(21) & _f(20) & _f(19) & _f(15) & _f(24) => _f(32));
_f(1) & _f(2) & WellDefinednessProperties.7,(_f(23) & _f(22) & _f(21) & _f(20) & _f(19) & _f(15) & _f(24) => _f(31));
_f(1) & _f(2) & WellDefinednessProperties.6,(_f(23) & _f(22) & _f(21) & _f(20) & _f(19) & _f(15) & _f(24) => _f(30));
_f(1) & _f(2) & WellDefinednessProperties.5,(_f(23) & _f(22) & _f(21) & _f(20) & _f(14) & _f(13) & _f(24) => _f(29));
_f(1) & _f(2) & WellDefinednessProperties.4,(_f(23) & _f(22) & _f(21) & _f(20) & _f(14) & _f(13) & _f(24) => _f(28));
_f(1) & _f(2) & WellDefinednessProperties.3,(_f(23) & _f(22) & _f(21) & _f(20) & _f(14) & _f(13) & _f(24) => _f(27));
_f(1) & _f(2) & WellDefinednessProperties.2,(_f(23) & _f(22) & _f(21) & _f(20) & _f(14) & _f(13) & _f(24) => _f(26));
_f(1) & _f(2) & WellDefinednessProperties.1,(_f(23) & _f(22) & _f(21) & _f(12) & _f(24) => _f(25));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.5,(_f(5) => _f(10));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.4,(_f(5) => _f(9));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.3,(_f(5) => _f(8));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.2,(_f(5) => _f(7));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.1,(_f(5) => _f(6))
END
&
THEORY Formulas IS
((NAT) = (((0) .. (2147483647)))) & ((INT) = (((-2147483647) .. (2147483647))));
((BIT) = ({0}\/{1})) & bit_not : BIT +-> BIT & bit_not : BIT >+> BIT & bit_not : BIT +->> BIT & bit_not : BIT --> BIT & dom(bit_not) = BIT & bit_not~ : BIT +-> BIT & ran(bit_not) = BIT & ((bit_not) : (((BIT) >->> (BIT)))) & ((bit_not) = ((({((0) |-> (1))}) \/ ({((1) |-> (0))})))) & bit_and : (BIT * BIT) +-> BIT & dom(bit_and) = (BIT * BIT) & ((bit_and) : ((((BIT * BIT)) --> (BIT)))) & ((bit_and) = ((((((({((((0) , (0))) |-> (0))}) \/ ({((((0) , (1))) |-> (0))}))) \/ ({((((1) , (0))) |-> (0))}))) \/ ({((((1) , (1))) |-> (1))})))) & bit_or : (BIT * BIT) +-> BIT & dom(bit_or) = (BIT * BIT) & ((bit_or) : ((((BIT * BIT)) --> (BIT)))) & ((bit_or) = ((((((({((((0) , (0))) |-> (0))}) \/ ({((((0) , (1))) |-> (1))}))) \/ ({((((1) , (0))) |-> (1))}))) \/ ({((((1) , (1))) |-> (1))})))) & bit_xor : (BIT * BIT) +-> BIT & dom(bit_xor) = (BIT * BIT) & ((bit_xor) : ((((BIT * BIT)) --> (BIT)))) & ((bit_xor) = ((((((({((((0) , (0))) |-> (0))}) \/ ({((((0) , (1))) |-> (1))}))) \/ ({((((1) , (0))) |-> (1))}))) \/ ({((((1) , (1))) |-> (0))})))) & ((bool_bit) = ({((TRUE) |-> (1))}\/{((FALSE) |-> (0))})) & ((BYTE_INDEX) = (((1) .. (8)))) & ((PHYS_BYTE_INDEX) = (((0) .. ((8 - 1))))) & ((BYTE) = (((BYTE_INDEX) --> (BIT)))) & !(b1).(((((b1) : (BYTE))) => (((size(b1)) = (8)) & b1 : seq(BIT) & b1 : NATURAL-{0} +-> BIT & not(b1 = {}) & ((b1) : (seq1(BIT)))))) & is_zero : BYTE +-> BIT & dom(is_zero) = BYTE & ((is_zero) : (((BYTE) --> (BIT)))) & ((is_zero) = (%(w1).(((w1) : (BYTE)) | (bool_bit )(bool((((w1 )(1)) = ((w1 )(2))) & (((w1 )(2)) = ((w1 )(3))) & (((w1 )(3)) = ((w1 )(4))) & (((w1 )(4)) = ((w1 )(5))) & (((w1 )(5)) = ((w1 )(6))) & (((w1 )(6)) = ((w1 )(7))) & (((w1 )(7)) = ((w1 )(8))) & (((w1 )(8)) = (0))))))) & parity_even : BYTE +-> BIT & dom(parity_even) = BYTE & ((parity_even) : (((BYTE) --> (BIT)))) & ((parity_even) = (%(bv).(((bv) : (BYTE)) | (1 - ((((((((((bv )(1) + (bv )(2)) + (bv )(3)) + (bv )(4)) + (bv )(5)) + (bv )(6)) + (bv )(7)) + (bv )(8))) mod (2)))))) & ((bv8_and) = (%(bt1,bt2).(((bt1) : (BYTE)) & ((bt2) : (BYTE)) | %(idx).(((idx) : (((1) .. (8)))) | (bit_and )((((bt1 )(idx)) |-> ((bt2 )(idx)))))))) & ((bv8_or) = (%(bt1,bt2).(((bt1) : (BYTE)) & ((bt2) : (BYTE)) | %(idx).(((idx) : (((1) .. (8)))) | (bit_or )((((bt1 )(idx)) |-> ((bt2 )(idx)))))))) & ((bv8_xor) = (%(bt1,bt2).(((bt1) : (BYTE)) & ((bt2) : (BYTE)) | %(idx).(((idx) : (((1) .. (8)))) | (bit_xor )((((bt1 )(idx)) |-> ((bt2 )(idx)))))))) & bv8get : (BYTE * PHYS_BYTE_INDEX) +-> BIT & dom(bv8get) = (BYTE * PHYS_BYTE_INDEX) & ((bv8get) : ((((BYTE * PHYS_BYTE_INDEX)) --> (BIT)))) & ((bv8get) = (%(bt1,ii).(((bt1) : (BYTE)) & ((ii) : (PHYS_BYTE_INDEX)) | (bt1 )((ii + 1))))) & bitset : (BYTE * PHYS_BYTE_INDEX) +-> BYTE & dom(bitset) = (BYTE * PHYS_BYTE_INDEX) & ((bitset) : ((((BYTE * PHYS_BYTE_INDEX)) --> (BYTE)))) & ((bitset) = (%(bt1,ii).(((bt1) : (BYTE)) & ((ii) : (PHYS_BYTE_INDEX)) | ((bt1) <+ ({(((ii + 1)) |-> (1))}))))) & bitclear : (BYTE * PHYS_BYTE_INDEX) +-> BYTE & dom(bitclear) = (BYTE * PHYS_BYTE_INDEX) & ((bitclear) : ((((BYTE * PHYS_BYTE_INDEX)) --> (BYTE)))) & ((bitclear) = (%(bt1,ii).(((bt1) : (BYTE)) & ((ii) : (PHYS_BYTE_INDEX)) | ((bt1) <+ ({(((ii + 1)) |-> (0))}))))) & complement : BYTE +-> BYTE & dom(complement) = BYTE & ((complement) : (((BYTE) --> (BYTE)))) & ((complement) = (%(bt).(((bt) : (BYTE)) | %(idx).(((idx) : (((1) .. (8)))) | (bit_not )((bt )(idx)))))) & swap : BYTE +-> BYTE & dom(swap) = BYTE & ((swap) : (((BYTE) --> (BYTE)))) & ((swap) = (%(bt).(((bt) : (BYTE)) | {((1) |-> ((bt )(5)))}\/{((2) |-> ((bt )(6)))}\/{((3) |-> ((bt )(7)))}\/{((4) |-> ((bt )(8)))}\/{((5) |-> ((bt )(1)))}\/{((6) |-> ((bt )(2)))}\/{((7) |-> ((bt )(3)))}\/{((8) |-> ((bt )(4)))}))) & rotateleft : BYTE +-> BYTE & dom(rotateleft) = BYTE & ((rotateleft) : (((BYTE) --> (BYTE)))) & ((rotateleft) = (%(bv).(((bv) : (BYTE)) | {((1) |-> ((bv )(8)))}\/{((2) |-> ((bv )(1)))}\/{((3) |-> ((bv )(2)))}\/{((4) |-> ((bv )(3)))}\/{((5) |-> ((bv )(4)))}\/{((6) |-> ((bv )(5)))}\/{((7) |-> ((bv )(6)))}\/{((8) |-> ((bv )(7)))}))) & rotateright : BYTE +-> BYTE & dom(rotateright) = BYTE & ((rotateright) : (((BYTE) --> (BYTE)))) & ((rotateright) = (%(bv).(((bv) : (BYTE)) | {((1) |-> ((bv )(2)))}\/{((2) |-> ((bv )(3)))}\/{((3) |-> ((bv )(4)))}\/{((4) |-> ((bv )(5)))}\/{((5) |-> ((bv )(6)))}\/{((6) |-> ((bv )(7)))}\/{((7) |-> ((bv )(8)))}\/{((8) |-> ((bv )(1)))}))) & get_upper_digit : BYTE +-> ((0) .. (15)) & dom(get_upper_digit) = BYTE & ((get_upper_digit) : (((BYTE) --> (((0) .. (15)))))) & ((get_upper_digit) = (%(by).(((by) : (BYTE)) | ((((8 * (by )(8)) + (4 * (by )(7))) + (2 * (by )(6))) + (by )(5))))) & get_lower_digit : BYTE +-> ((0) .. (15)) & dom(get_lower_digit) = BYTE & ((get_lower_digit) : (((BYTE) --> (((0) .. (15)))))) & ((get_lower_digit) = (%(by).(((by) : (BYTE)) | ((((8 * (by )(4)) + (4 * (by )(3))) + (2 * (by )(2))) + (by )(1)))));
((BV16_INDX) = (((1) .. (16)))) & ((PHYS_BV16_INDEX) = (((0) .. ((16 - 1))))) & ((BV16) = (((BV16_INDX) --> (BIT)))) & !(b1).(((((b1) : (BV16))) => (((size(b1)) = (16)) & b1 : seq(BIT) & b1 : NATURAL-{0} +-> BIT & not(b1 = {}) & ((b1) : (seq1(BIT)))))) & ((complement16) = (%(bt).(((bt) : (BV16)) | %(idx).(((idx) : (((1) .. (16)))) | (bit_not )((bt )(idx)))))) & ((bv16_byte) = (%(bv).(((bv) : (BV16)) | (({((8) |-> ((bv )(16)))}\/{((7) |-> ((bv )(15)))}\/{((6) |-> ((bv )(14)))}\/{((5) |-> ((bv )(13)))}\/{((4) |-> ((bv )(12)))}\/{((3) |-> ((bv )(11)))}\/{((2) |-> ((bv )(10)))}\/{((1) |-> ((bv )(9)))}) , ({((8) |-> ((bv )(8)))}\/{((7) |-> ((bv )(7)))}\/{((6) |-> ((bv )(6)))}\/{((5) |-> ((bv )(5)))}\/{((4) |-> ((bv )(4)))}\/{((3) |-> ((bv )(3)))}\/{((2) |-> ((bv )(2)))}\/{((1) |-> ((bv )(1)))}))))) & ((byte_bv16) = (%(bv1,bv2).(((bv1) : (BYTE)) & ((bv2) : (BYTE)) | {((16) |-> ((bv1 )(8)))}\/{((15) |-> ((bv1 )(7)))}\/{((14) |-> ((bv1 )(6)))}\/{((13) |-> ((bv1 )(5)))}\/{((12) |-> ((bv1 )(4)))}\/{((11) |-> ((bv1 )(3)))}\/{((10) |-> ((bv1 )(2)))}\/{((9) |-> ((bv1 )(1)))}\/{((8) |-> ((bv2 )(8)))}\/{((7) |-> ((bv2 )(7)))}\/{((6) |-> ((bv2 )(6)))}\/{((5) |-> ((bv2 )(5)))}\/{((4) |-> ((bv2 )(4)))}\/{((3) |-> ((bv2 )(3)))}\/{((2) |-> ((bv2 )(2)))}\/{((1) |-> ((bv2 )(1)))})));
!(bb).(((((bb) : (BIT))) => ((((bit_not )(bb)) = ((1 - bb)))))) & ((dom(bit_and)) = ((BIT * BIT))) & ((ran(bit_not)) = (BIT)) & (((bit_not )(0)) = (1)) & (((bit_not )(1)) = (0)) & !(bb).(((((bb) : (BIT))) => ((((bit_not )((bit_not )(bb))) = (bb))))) & ((dom(bit_and)) = ((BIT * BIT))) & ((ran(bit_and)) = (BIT)) & (((bit_and )(((0) |-> (0)))) = (0)) & (((bit_and )(((0) |-> (1)))) = (0)) & (((bit_and )(((1) |-> (0)))) = (0)) & (((bit_and )(((1) |-> (1)))) = (1)) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT))) => ((((bit_and )(((b1) |-> (b2)))) = ((bit_and )(((b2) |-> (b1)))))))) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT)) & (((bit_and )(((b1) |-> (b2)))) = (1))) => ((((bit_and )(((b2) |-> (b1)))) = (1))))) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT)) & (((bit_and )(((b1) |-> (b2)))) = (0))) => ((((bit_and )(((b2) |-> (b1)))) = (0))))) & !(b1,b2,b3).(((((b1) : (BIT)) & ((b2) : (BIT)) & ((b3) : (BIT))) => ((((bit_and )(((b1) |-> ((bit_and )(((b2) |-> (b3))))))) = ((bit_and )((((bit_and )(((b1) |-> (b2)))) |-> (b3)))))))) & !(b1).(((((b1) : (BIT))) => ((((bit_and )(((b1) |-> (1)))) = (b1))))) & !(b1).(((((b1) : (BIT))) => ((((bit_and )(((b1) |-> (0)))) = (0))))) & ((dom(bit_or)) = ((BIT * BIT))) & ((ran(bit_or)) = (BIT)) & (((bit_or )(((0) |-> (0)))) = (0)) & (((bit_or )(((0) |-> (1)))) = (1)) & (((bit_or )(((1) |-> (0)))) = (1)) & (((bit_or )(((1) |-> (1)))) = (1)) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT))) => ((((bit_or )(((b1) |-> (b2)))) = ((bit_or )(((b2) |-> (b1)))))))) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT)) & (((bit_or )(((b1) |-> (b2)))) = (1))) => ((((bit_or )(((b2) |-> (b1)))) = (1))))) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT)) & (((bit_or )(((b1) |-> (b2)))) = (0))) => ((((bit_or )(((b2) |-> (b1)))) = (0))))) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT)) & (((bit_or )(((b1) |-> (0)))) = (1))) => (((b1) = (1))))) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT)) & (((bit_or )(((b1) |-> (0)))) = (0))) => (((b1) = (0))))) & !(b1,b2,b3).(((((b1) : (BIT)) & ((b2) : (BIT)) & ((b3) : (BIT))) => ((((bit_or )(((b1) |-> ((bit_or )(((b2) |-> (b3))))))) = ((bit_or )((((bit_or )(((b1) |-> (b2)))) |-> (b3)))))))) & !(b1,b2,b3).(((((b1) : (BIT)) & ((b2) : (BIT)) & ((b3) : (BIT)) & (((bit_or )(((b1) |-> (b2)))) = (1))) => ((((bit_or )(((b1) |-> ((bit_or )(((b2) |-> (b3))))))) = (1))))) & !(b1,b2,b3).(((((b1) : (BIT)) & ((b2) : (BIT)) & ((b3) : (BIT)) & (((bit_or )(((b1) |-> (b2)))) = (1))) => ((((bit_or )(((b1) |-> ((bit_or )(((b2) |-> (b3))))))) = ((bit_or )(((1) |-> (b3)))))))) & !(b1).(((((b1) : (BIT))) => ((((bit_or )(((b1) |-> (1)))) = (1))))) & !(b1).(((((b1) : (BIT))) => ((((bit_or )(((b1) |-> (0)))) = (b1))))) & !(b1).(((((b1) : (BIT))) => ((((bit_or )(((1) |-> (b1)))) = (1))))) & !(b1).(((((b1) : (BIT))) => ((((bit_or )(((0) |-> (b1)))) = (b1))))) & ((dom(bit_xor)) = ((BIT * BIT))) & ((ran(bit_xor)) = (BIT)) & (((bit_xor )(((0) |-> (0)))) = (0)) & (((bit_xor )(((0) |-> (1)))) = (1)) & (((bit_xor )(((1) |-> (0)))) = (1)) & (((bit_xor )(((1) |-> (1)))) = (0)) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT))) => ((((bit_xor )(((b1) |-> (b2)))) = ((bit_xor )(((b2) |-> (b1)))))))) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT)) & (((bit_xor )(((b1) |-> (b2)))) = (1))) => ((((bit_xor )(((b2) |-> (b1)))) = (1))))) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT)) & (((bit_xor )(((b1) |-> (b2)))) = (0))) => ((((bit_xor )(((b2) |-> (b1)))) = (0))))) & !(b1,b2,b3).(((((b1) : (BIT)) & ((b2) : (BIT)) & ((b3) : (BIT))) => ((((bit_xor )(((b1) |-> ((bit_xor )(((b2) |-> (b3))))))) = ((bit_xor )((((bit_xor )(((b1) |-> (b2)))) |-> (b3)))))))) & !(b1,b2,b3).(((((b1) : (BIT)) & ((b2) : (BIT)) & ((b3) : (BIT)) & (((bit_xor )(((b1) |-> (b2)))) = (1))) => ((((bit_xor )(((b1) |-> ((bit_xor )(((b2) |-> (b3))))))) = ((bit_xor )(((1) |-> (b3)))))))) & !(bb).(((((bb) : (BIT))) => ((((bit_xor )(((bb) |-> (bb)))) = (0))))) & ((dom(bool_bit)) = (BOOL)) & ((ran(bit_xor)) = (BIT)) & (((bool_bit )(TRUE)) = (1)) & (((bool_bit )(FALSE)) = (0)) & !(bb).(((((bb) : (BIT))) => (((((bb) = (0))) or (((bb) = (1))))))) & !(bb).(((((bb) : (BIT)) & not(((bb) = (0)))) => (((bb) = (1))))) & !(bb).(((((bb) : (BIT)) & not(((bb) = (1)))) => (((bb) = (0))))) & ((card(BYTE)) = (256)) & is_zero : BYTE +-> BIT & dom(is_zero) = BYTE & ((is_zero) : (((BYTE) --> (BIT)))) & parity_even : BYTE +-> BIT & dom(parity_even) = BYTE & ((parity_even) : (((BYTE) --> (BIT)))) & bv8_and : (BYTE * BYTE) +-> BYTE & dom(bv8_and) = (BYTE * BYTE) & ((bv8_and) : ((((BYTE * BYTE)) --> (BYTE)))) & bv8_or : (BYTE * BYTE) +-> BYTE & dom(bv8_or) = (BYTE * BYTE) & ((bv8_or) : ((((BYTE * BYTE)) --> (BYTE)))) & bv8_xor : (BYTE * BYTE) +-> BYTE & dom(bv8_xor) = (BYTE * BYTE) & ((bv8_xor) : ((((BYTE * BYTE)) --> (BYTE)))) & complement : BYTE +-> BYTE & dom(complement) = BYTE & ((complement) : (((BYTE) --> (BYTE)))) & swap : BYTE +-> BYTE & dom(swap) = BYTE & ((swap) : (((BYTE) --> (BYTE)))) & rotateleft : BYTE +-> BYTE & dom(rotateleft) = BYTE & ((rotateleft) : (((BYTE) --> (BYTE)))) & rotateright : BYTE +-> BYTE & dom(rotateright) = BYTE & ((rotateright) : (((BYTE) --> (BYTE)))) & !(bt).(((((bt) : (BYTE))) => (((size(bt)) = (8))))) & 8 : INTEGER & 0 <= 8 & ((8) : (NATURAL)) & ((dom(is_zero)) = (BYTE)) & ran(is_zero) : POW( BIT) & ((dom(parity_even)) = (BYTE)) & ran(parity_even) : POW( BIT) & bv8_and : (BYTE * BYTE) +-> BYTE & dom(bv8_and) = (BYTE * BYTE) & ((bv8_and) : ((((BYTE * BYTE)) --> (BYTE)))) & ((dom(complement)) = (BYTE)) & ran(complement) : POW( BYTE) & ((dom(swap)) = (BYTE)) & ran(swap) : POW( BYTE) & ((dom(rotateleft)) = (BYTE)) & ran(rotateleft) : POW( BYTE) & ((dom(rotateright)) = (BYTE)) & ran(rotateright) : POW( BYTE) & ((dom(get_upper_digit)) = (BYTE)) & ran(get_upper_digit) : POW( ((0) .. ((16 - 1)))) & ((dom(get_lower_digit)) = (BYTE)) & ran(get_lower_digit) : POW( ((0) .. ((16 - 1)))) & (([1,1,1,1,1,1,1,1]) : (BYTE)) & (([0,0,0,0,0,0,0,0]) : (BYTE)) & ((1) = ((2 ** 0))) & ((2) = ((2 ** 1))) & ((4) = ((2 ** 2))) & ((8) = ((2 ** 3))) & ((16) = ((2 ** 4))) & ((32) = ((2 ** 5))) & ((64) = ((2 ** 6))) & ((128) = ((2 ** 7))) & ((256) = ((2 ** 8))) & ((512) = ((2 ** 9))) & ((1024) = ((2 ** 10))) & ((2048) = ((2 ** 11))) & ((4096) = ((2 ** 12))) & ((8192) = ((2 ** 13))) & ((16384) = ((2 ** 14))) & ((32768) = ((2 ** 15))) & ((65536) = ((2 ** 16)));
"Assertion is verified";
((card(BV16)) = (65536));
((complement16) : (((BV16) --> (BV16))));
((byte_bv16) = ((bv16_byte)~));
(([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) : (BV16));
(([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]) : (BV16));
((size(b1)) = (16));
((b1) : (BV16));
((idx) : (((1) .. (16))));
((bt) : (BV16));
((bv) : (BV16));
((bv1) : (BYTE));
((bv2) : (BYTE));
((bv16_byte) = (%(bv).(((bv) : (BV16)) | (({((8) |-> ((bv )(16)))}\/{((7) |-> ((bv )(15)))}\/{((6) |-> ((bv )(14)))}\/{((5) |-> ((bv )(13)))}\/{((4) |-> ((bv )(12)))}\/{((3) |-> ((bv )(11)))}\/{((2) |-> ((bv )(10)))}\/{((1) |-> ((bv )(9)))}) , ({((8) |-> ((bv )(8)))}\/{((7) |-> ((bv )(7)))}\/{((6) |-> ((bv )(6)))}\/{((5) |-> ((bv )(5)))}\/{((4) |-> ((bv )(4)))}\/{((3) |-> ((bv )(3)))}\/{((2) |-> ((bv )(2)))}\/{((1) |-> ((bv )(1)))})))));
((complement16) = (%(bt).(((bt) : (BV16)) | %(idx).(((idx) : (((1) .. (16)))) | (bit_not )((bt )(idx))))));
!(b1).(((((b1) : (BV16))) => (((size(b1)) = (16)) & b1 : seq(BIT) & b1 : NATURAL-{0} +-> BIT & not(b1 = {}) & ((b1) : (seq1(BIT))))));
((BV16) = (((BV16_INDX) --> (BIT))));
((PHYS_BV16_INDEX) = (((0) .. ((16 - 1)))));
((BV16_INDX) = (((1) .. (16))));
"Well definedness";
((b1) : (seq(ran(b1))));
((idx) : (dom(bt)));
((bt) : (((dom(bt)) +-> (ran(bt)))));
(((bt )(idx)) : (dom(bit_not)));
((bit_not) : (((dom(bit_not)) +-> (ran(bit_not)))));
((16) : (dom(bv)));
((bv) : (((dom(bv)) +-> (ran(bv)))));
((15) : (dom(bv)));
((14) : (dom(bv)));
((13) : (dom(bv)));
((12) : (dom(bv)));
((11) : (dom(bv)));
((10) : (dom(bv)));
((9) : (dom(bv)));
((8) : (dom(bv)));
((7) : (dom(bv)));
((6) : (dom(bv)));
((5) : (dom(bv)));
((4) : (dom(bv)));
((3) : (dom(bv)));
((2) : (dom(bv)));
((1) : (dom(bv)));
((8) : (dom(bv1)));
((bv1) : (((dom(bv1)) +-> (ran(bv1)))));
complement16 : BV16 +-> BV16;
dom(complement16) = BV16;
((BV16) : (FIN(BV16)))
END
&
THEORY EnumerateX
END

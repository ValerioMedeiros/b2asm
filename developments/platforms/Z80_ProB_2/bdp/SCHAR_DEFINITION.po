THEORY ProofList IS
_f(1) & _f(2) & _f(3) & _f(4) & WellDefinednessAssertions.2,(_f(6) & _f(25) => _f(45));
_f(1) & _f(2) & _f(3) & _f(4) & WellDefinednessAssertions.1,(_f(25) => _f(44));
_f(1) & _f(2) & WellDefinednessProperties.11,(_f(24) & _f(23) & _f(22) & _f(21) & _f(11) & _f(13) & _f(25) => _f(35));
_f(1) & _f(2) & WellDefinednessProperties.10,(_f(24) & _f(23) & _f(22) & _f(21) & _f(11) & _f(12) & _f(25) => _f(35));
_f(1) & _f(2) & WellDefinednessProperties.9,(_f(24) & _f(23) & _f(22) & _f(10) & _f(25) => _f(34));
_f(1) & _f(2) & WellDefinednessProperties.8,(_f(24) & _f(23) & _f(22) & _f(10) & _f(25) => _f(33));
_f(1) & _f(2) & WellDefinednessProperties.7,(_f(24) & _f(23) & _f(22) & _f(10) & _f(25) => _f(32));
_f(1) & _f(2) & WellDefinednessProperties.6,(_f(24) & _f(23) & _f(22) & _f(10) & _f(25) => _f(31));
_f(1) & _f(2) & WellDefinednessProperties.5,(_f(24) & _f(23) & _f(22) & _f(10) & _f(25) => _f(30));
_f(1) & _f(2) & WellDefinednessProperties.4,(_f(24) & _f(23) & _f(22) & _f(10) & _f(25) => _f(29));
_f(1) & _f(2) & WellDefinednessProperties.3,(_f(24) & _f(23) & _f(22) & _f(10) & _f(25) => _f(28));
_f(1) & _f(2) & WellDefinednessProperties.2,(_f(24) & _f(23) & _f(22) & _f(10) & _f(25) => _f(27));
_f(1) & _f(2) & WellDefinednessProperties.1,(_f(24) & _f(23) & _f(22) & _f(10) & _f(25) => _f(26));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.4,(_f(5) => _f(9));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.3,(_f(5) => _f(8));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.2,(_f(5) => _f(7));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.1,(_f(5) => _f(6))
END
&
THEORY Formulas IS
((NAT) = (((0) .. (2147483647)))) & ((INT) = (((-2147483647) .. (2147483647))));
((BIT) = ({0}\/{1})) & bit_not : BIT +-> BIT & bit_not : BIT >+> BIT & bit_not : BIT +->> BIT & bit_not : BIT --> BIT & dom(bit_not) = BIT & bit_not~ : BIT +-> BIT & ran(bit_not) = BIT & ((bit_not) : (((BIT) >->> (BIT)))) & ((bit_not) = ((({((0) |-> (1))}) \/ ({((1) |-> (0))})))) & bit_and : (BIT * BIT) +-> BIT & dom(bit_and) = (BIT * BIT) & ((bit_and) : ((((BIT * BIT)) --> (BIT)))) & ((bit_and) = ((((((({((((0) , (0))) |-> (0))}) \/ ({((((0) , (1))) |-> (0))}))) \/ ({((((1) , (0))) |-> (0))}))) \/ ({((((1) , (1))) |-> (1))})))) & bit_or : (BIT * BIT) +-> BIT & dom(bit_or) = (BIT * BIT) & ((bit_or) : ((((BIT * BIT)) --> (BIT)))) & ((bit_or) = ((((((({((((0) , (0))) |-> (0))}) \/ ({((((0) , (1))) |-> (1))}))) \/ ({((((1) , (0))) |-> (1))}))) \/ ({((((1) , (1))) |-> (1))})))) & bit_xor : (BIT * BIT) +-> BIT & dom(bit_xor) = (BIT * BIT) & ((bit_xor) : ((((BIT * BIT)) --> (BIT)))) & ((bit_xor) = ((((((({((((0) , (0))) |-> (0))}) \/ ({((((0) , (1))) |-> (1))}))) \/ ({((((1) , (0))) |-> (1))}))) \/ ({((((1) , (1))) |-> (0))})))) & ((bool_bit) = ({((TRUE) |-> (1))}\/{((FALSE) |-> (0))})) & ((BYTE_INDEX) = (((1) .. (8)))) & ((PHYS_BYTE_INDEX) = (((0) .. ((8 - 1))))) & ((BYTE) = (((BYTE_INDEX) --> (BIT)))) & !(b1).(((((b1) : (BYTE))) => (((size(b1)) = (8)) & b1 : seq(BIT) & b1 : NATURAL-{0} +-> BIT & not(b1 = {}) & ((b1) : (seq1(BIT)))))) & is_zero : BYTE +-> BIT & dom(is_zero) = BYTE & ((is_zero) : (((BYTE) --> (BIT)))) & ((is_zero) = (%(w1).(((w1) : (BYTE)) | (bool_bit )(bool((((w1 )(1)) = ((w1 )(2))) & (((w1 )(2)) = ((w1 )(3))) & (((w1 )(3)) = ((w1 )(4))) & (((w1 )(4)) = ((w1 )(5))) & (((w1 )(5)) = ((w1 )(6))) & (((w1 )(6)) = ((w1 )(7))) & (((w1 )(7)) = ((w1 )(8))) & (((w1 )(8)) = (0))))))) & parity_even : BYTE +-> BIT & dom(parity_even) = BYTE & ((parity_even) : (((BYTE) --> (BIT)))) & ((parity_even) = (%(bv).(((bv) : (BYTE)) | (1 - ((((((((((bv )(1) + (bv )(2)) + (bv )(3)) + (bv )(4)) + (bv )(5)) + (bv )(6)) + (bv )(7)) + (bv )(8))) mod (2)))))) & ((bv8_and) = (%(bt1,bt2).(((bt1) : (BYTE)) & ((bt2) : (BYTE)) | %(idx).(((idx) : (((1) .. (8)))) | (bit_and )((((bt1 )(idx)) |-> ((bt2 )(idx)))))))) & ((bv8_or) = (%(bt1,bt2).(((bt1) : (BYTE)) & ((bt2) : (BYTE)) | %(idx).(((idx) : (((1) .. (8)))) | (bit_or )((((bt1 )(idx)) |-> ((bt2 )(idx)))))))) & ((bv8_xor) = (%(bt1,bt2).(((bt1) : (BYTE)) & ((bt2) : (BYTE)) | %(idx).(((idx) : (((1) .. (8)))) | (bit_xor )((((bt1 )(idx)) |-> ((bt2 )(idx)))))))) & bv8get : (BYTE * PHYS_BYTE_INDEX) +-> BIT & dom(bv8get) = (BYTE * PHYS_BYTE_INDEX) & ((bv8get) : ((((BYTE * PHYS_BYTE_INDEX)) --> (BIT)))) & ((bv8get) = (%(bt1,ii).(((bt1) : (BYTE)) & ((ii) : (PHYS_BYTE_INDEX)) | (bt1 )((ii + 1))))) & bitset : (BYTE * PHYS_BYTE_INDEX) +-> BYTE & dom(bitset) = (BYTE * PHYS_BYTE_INDEX) & ((bitset) : ((((BYTE * PHYS_BYTE_INDEX)) --> (BYTE)))) & ((bitset) = (%(bt1,ii).(((bt1) : (BYTE)) & ((ii) : (PHYS_BYTE_INDEX)) | ((bt1) <+ ({(((ii + 1)) |-> (1))}))))) & bitclear : (BYTE * PHYS_BYTE_INDEX) +-> BYTE & dom(bitclear) = (BYTE * PHYS_BYTE_INDEX) & ((bitclear) : ((((BYTE * PHYS_BYTE_INDEX)) --> (BYTE)))) & ((bitclear) = (%(bt1,ii).(((bt1) : (BYTE)) & ((ii) : (PHYS_BYTE_INDEX)) | ((bt1) <+ ({(((ii + 1)) |-> (0))}))))) & complement : BYTE +-> BYTE & dom(complement) = BYTE & ((complement) : (((BYTE) --> (BYTE)))) & ((complement) = (%(bt).(((bt) : (BYTE)) | %(idx).(((idx) : (((1) .. (8)))) | (bit_not )((bt )(idx)))))) & swap : BYTE +-> BYTE & dom(swap) = BYTE & ((swap) : (((BYTE) --> (BYTE)))) & ((swap) = (%(bt).(((bt) : (BYTE)) | {((1) |-> ((bt )(5)))}\/{((2) |-> ((bt )(6)))}\/{((3) |-> ((bt )(7)))}\/{((4) |-> ((bt )(8)))}\/{((5) |-> ((bt )(1)))}\/{((6) |-> ((bt )(2)))}\/{((7) |-> ((bt )(3)))}\/{((8) |-> ((bt )(4)))}))) & rotateleft : BYTE +-> BYTE & dom(rotateleft) = BYTE & ((rotateleft) : (((BYTE) --> (BYTE)))) & ((rotateleft) = (%(bv).(((bv) : (BYTE)) | {((1) |-> ((bv )(8)))}\/{((2) |-> ((bv )(1)))}\/{((3) |-> ((bv )(2)))}\/{((4) |-> ((bv )(3)))}\/{((5) |-> ((bv )(4)))}\/{((6) |-> ((bv )(5)))}\/{((7) |-> ((bv )(6)))}\/{((8) |-> ((bv )(7)))}))) & rotateright : BYTE +-> BYTE & dom(rotateright) = BYTE & ((rotateright) : (((BYTE) --> (BYTE)))) & ((rotateright) = (%(bv).(((bv) : (BYTE)) | {((1) |-> ((bv )(2)))}\/{((2) |-> ((bv )(3)))}\/{((3) |-> ((bv )(4)))}\/{((4) |-> ((bv )(5)))}\/{((5) |-> ((bv )(6)))}\/{((6) |-> ((bv )(7)))}\/{((7) |-> ((bv )(8)))}\/{((8) |-> ((bv )(1)))}))) & get_upper_digit : BYTE +-> ((0) .. (15)) & dom(get_upper_digit) = BYTE & ((get_upper_digit) : (((BYTE) --> (((0) .. (15)))))) & ((get_upper_digit) = (%(by).(((by) : (BYTE)) | ((((8 * (by )(8)) + (4 * (by )(7))) + (2 * (by )(6))) + (by )(5))))) & get_lower_digit : BYTE +-> ((0) .. (15)) & dom(get_lower_digit) = BYTE & ((get_lower_digit) : (((BYTE) --> (((0) .. (15)))))) & ((get_lower_digit) = (%(by).(((by) : (BYTE)) | ((((8 * (by )(4)) + (4 * (by )(3))) + (2 * (by )(2))) + (by )(1))))) & ((UCHAR_MAX) = ((256 - 1))) & ((UCHAR_MIN) = (0)) & ((UCHAR) = (((UCHAR_MIN) .. (UCHAR_MAX)))) & ((byte_uchar) = (%(v0).(((v0) : (BYTE)) | ((((((((128 * (v0 )(8)) + (64 * (v0 )(7))) + (32 * (v0 )(6))) + (16 * (v0 )(5))) + (8 * (v0 )(4))) + (4 * (v0 )(3))) + (2 * (v0 )(2))) + (1 * (v0 )(1)))))) & ((uchar_byte) = (%(v0).(((v0) : (UCHAR)) | [(((v0) mod (2)) / 1),(((v0) mod (4)) / 2),(((v0) mod (8)) / 4),(((v0) mod (16)) / 8),(((v0) mod (32)) / 16),(((v0) mod (64)) / 32),(((v0) mod (128)) / 64),(((v0) mod (256)) / 128)])));
((SCHAR_MAX) = ((128 - 1))) & ((SCHAR_MIN) = (-128)) & ((SCHAR) = (((SCHAR_MIN) .. (SCHAR_MAX)))) & ((byte_schar) = (%(v0).(((v0) : (BYTE)) | ((((((((-128 * (v0 )(8)) + (64 * (v0 )(7))) + (32 * (v0 )(6))) + (16 * (v0 )(5))) + (8 * (v0 )(4))) + (4 * (v0 )(3))) + (2 * (v0 )(2))) + (v0 )(1))))) & ((schar_byte) = (((%(v0).(((v0) : (SCHAR)) & (0 <= v0) | [(((v0) mod (2)) / 1),(((v0) mod (4)) / 2),(((v0) mod (8)) / 4),(((v0) mod (16)) / 8),(((v0) mod (32)) / 16),(((v0) mod (64)) / 32),(((v0) mod (128)) / 64),(((v0) mod (256)) / 128)])) \/ (%(v0).(((v0) : (SCHAR)) & not((0 <= v0)) | [((((v0 + 256)) mod (2)) / 1),((((v0 + 256)) mod (4)) / 2),((((v0 + 256)) mod (8)) / 4),((((v0 + 256)) mod (16)) / 8),((((v0 + 256)) mod (32)) / 16),((((v0 + 256)) mod (64)) / 32),((((v0 + 256)) mod (128)) / 64),((((v0 + 256)) mod (256)) / 128)]))))) & ((uchar_schar) = (((%(v1).(((v1) : (UCHAR)) & (v1 <= SCHAR_MAX) | v1)) \/ (%(v1).(((v1) : (UCHAR)) & not((v1 <= SCHAR_MAX)) | (v1 - 256)))))) & ((schar_uchar) = (((%(v1).(((v1) : (((0) .. (127)))) | v1)) \/ (%(v1).(((v1) : (((-128) .. (-1)))) | (v1 + 256))))));
!(bb).(((((bb) : (BIT))) => ((((bit_not )(bb)) = ((1 - bb)))))) & ((dom(bit_and)) = ((BIT * BIT))) & ((ran(bit_not)) = (BIT)) & (((bit_not )(0)) = (1)) & (((bit_not )(1)) = (0)) & !(bb).(((((bb) : (BIT))) => ((((bit_not )((bit_not )(bb))) = (bb))))) & ((dom(bit_and)) = ((BIT * BIT))) & ((ran(bit_and)) = (BIT)) & (((bit_and )(((0) |-> (0)))) = (0)) & (((bit_and )(((0) |-> (1)))) = (0)) & (((bit_and )(((1) |-> (0)))) = (0)) & (((bit_and )(((1) |-> (1)))) = (1)) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT))) => ((((bit_and )(((b1) |-> (b2)))) = ((bit_and )(((b2) |-> (b1)))))))) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT)) & (((bit_and )(((b1) |-> (b2)))) = (1))) => ((((bit_and )(((b2) |-> (b1)))) = (1))))) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT)) & (((bit_and )(((b1) |-> (b2)))) = (0))) => ((((bit_and )(((b2) |-> (b1)))) = (0))))) & !(b1,b2,b3).(((((b1) : (BIT)) & ((b2) : (BIT)) & ((b3) : (BIT))) => ((((bit_and )(((b1) |-> ((bit_and )(((b2) |-> (b3))))))) = ((bit_and )((((bit_and )(((b1) |-> (b2)))) |-> (b3)))))))) & !(b1).(((((b1) : (BIT))) => ((((bit_and )(((b1) |-> (1)))) = (b1))))) & !(b1).(((((b1) : (BIT))) => ((((bit_and )(((b1) |-> (0)))) = (0))))) & ((dom(bit_or)) = ((BIT * BIT))) & ((ran(bit_or)) = (BIT)) & (((bit_or )(((0) |-> (0)))) = (0)) & (((bit_or )(((0) |-> (1)))) = (1)) & (((bit_or )(((1) |-> (0)))) = (1)) & (((bit_or )(((1) |-> (1)))) = (1)) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT))) => ((((bit_or )(((b1) |-> (b2)))) = ((bit_or )(((b2) |-> (b1)))))))) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT)) & (((bit_or )(((b1) |-> (b2)))) = (1))) => ((((bit_or )(((b2) |-> (b1)))) = (1))))) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT)) & (((bit_or )(((b1) |-> (b2)))) = (0))) => ((((bit_or )(((b2) |-> (b1)))) = (0))))) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT)) & (((bit_or )(((b1) |-> (0)))) = (1))) => (((b1) = (1))))) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT)) & (((bit_or )(((b1) |-> (0)))) = (0))) => (((b1) = (0))))) & !(b1,b2,b3).(((((b1) : (BIT)) & ((b2) : (BIT)) & ((b3) : (BIT))) => ((((bit_or )(((b1) |-> ((bit_or )(((b2) |-> (b3))))))) = ((bit_or )((((bit_or )(((b1) |-> (b2)))) |-> (b3)))))))) & !(b1,b2,b3).(((((b1) : (BIT)) & ((b2) : (BIT)) & ((b3) : (BIT)) & (((bit_or )(((b1) |-> (b2)))) = (1))) => ((((bit_or )(((b1) |-> ((bit_or )(((b2) |-> (b3))))))) = (1))))) & !(b1,b2,b3).(((((b1) : (BIT)) & ((b2) : (BIT)) & ((b3) : (BIT)) & (((bit_or )(((b1) |-> (b2)))) = (1))) => ((((bit_or )(((b1) |-> ((bit_or )(((b2) |-> (b3))))))) = ((bit_or )(((1) |-> (b3)))))))) & !(b1).(((((b1) : (BIT))) => ((((bit_or )(((b1) |-> (1)))) = (1))))) & !(b1).(((((b1) : (BIT))) => ((((bit_or )(((b1) |-> (0)))) = (b1))))) & !(b1).(((((b1) : (BIT))) => ((((bit_or )(((1) |-> (b1)))) = (1))))) & !(b1).(((((b1) : (BIT))) => ((((bit_or )(((0) |-> (b1)))) = (b1))))) & ((dom(bit_xor)) = ((BIT * BIT))) & ((ran(bit_xor)) = (BIT)) & (((bit_xor )(((0) |-> (0)))) = (0)) & (((bit_xor )(((0) |-> (1)))) = (1)) & (((bit_xor )(((1) |-> (0)))) = (1)) & (((bit_xor )(((1) |-> (1)))) = (0)) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT))) => ((((bit_xor )(((b1) |-> (b2)))) = ((bit_xor )(((b2) |-> (b1)))))))) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT)) & (((bit_xor )(((b1) |-> (b2)))) = (1))) => ((((bit_xor )(((b2) |-> (b1)))) = (1))))) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT)) & (((bit_xor )(((b1) |-> (b2)))) = (0))) => ((((bit_xor )(((b2) |-> (b1)))) = (0))))) & !(b1,b2,b3).(((((b1) : (BIT)) & ((b2) : (BIT)) & ((b3) : (BIT))) => ((((bit_xor )(((b1) |-> ((bit_xor )(((b2) |-> (b3))))))) = ((bit_xor )((((bit_xor )(((b1) |-> (b2)))) |-> (b3)))))))) & !(b1,b2,b3).(((((b1) : (BIT)) & ((b2) : (BIT)) & ((b3) : (BIT)) & (((bit_xor )(((b1) |-> (b2)))) = (1))) => ((((bit_xor )(((b1) |-> ((bit_xor )(((b2) |-> (b3))))))) = ((bit_xor )(((1) |-> (b3)))))))) & !(bb).(((((bb) : (BIT))) => ((((bit_xor )(((bb) |-> (bb)))) = (0))))) & ((dom(bool_bit)) = (BOOL)) & ((ran(bit_xor)) = (BIT)) & (((bool_bit )(TRUE)) = (1)) & (((bool_bit )(FALSE)) = (0)) & !(bb).(((((bb) : (BIT))) => (((((bb) = (0))) or (((bb) = (1))))))) & !(bb).(((((bb) : (BIT)) & not(((bb) = (0)))) => (((bb) = (1))))) & !(bb).(((((bb) : (BIT)) & not(((bb) = (1)))) => (((bb) = (0))))) & ((card(BYTE)) = (256)) & is_zero : BYTE +-> BIT & dom(is_zero) = BYTE & ((is_zero) : (((BYTE) --> (BIT)))) & parity_even : BYTE +-> BIT & dom(parity_even) = BYTE & ((parity_even) : (((BYTE) --> (BIT)))) & bv8_and : (BYTE * BYTE) +-> BYTE & dom(bv8_and) = (BYTE * BYTE) & ((bv8_and) : ((((BYTE * BYTE)) --> (BYTE)))) & bv8_or : (BYTE * BYTE) +-> BYTE & dom(bv8_or) = (BYTE * BYTE) & ((bv8_or) : ((((BYTE * BYTE)) --> (BYTE)))) & bv8_xor : (BYTE * BYTE) +-> BYTE & dom(bv8_xor) = (BYTE * BYTE) & ((bv8_xor) : ((((BYTE * BYTE)) --> (BYTE)))) & complement : BYTE +-> BYTE & dom(complement) = BYTE & ((complement) : (((BYTE) --> (BYTE)))) & swap : BYTE +-> BYTE & dom(swap) = BYTE & ((swap) : (((BYTE) --> (BYTE)))) & rotateleft : BYTE +-> BYTE & dom(rotateleft) = BYTE & ((rotateleft) : (((BYTE) --> (BYTE)))) & rotateright : BYTE +-> BYTE & dom(rotateright) = BYTE & ((rotateright) : (((BYTE) --> (BYTE)))) & !(bt).(((((bt) : (BYTE))) => (((size(bt)) = (8))))) & 8 : INTEGER & 0 <= 8 & ((8) : (NATURAL)) & ((dom(is_zero)) = (BYTE)) & ran(is_zero) : POW( BIT) & ((dom(parity_even)) = (BYTE)) & ran(parity_even) : POW( BIT) & bv8_and : (BYTE * BYTE) +-> BYTE & dom(bv8_and) = (BYTE * BYTE) & ((bv8_and) : ((((BYTE * BYTE)) --> (BYTE)))) & ((dom(complement)) = (BYTE)) & ran(complement) : POW( BYTE) & ((dom(swap)) = (BYTE)) & ran(swap) : POW( BYTE) & ((dom(rotateleft)) = (BYTE)) & ran(rotateleft) : POW( BYTE) & ((dom(rotateright)) = (BYTE)) & ran(rotateright) : POW( BYTE) & ((dom(get_upper_digit)) = (BYTE)) & ran(get_upper_digit) : POW( ((0) .. ((16 - 1)))) & ((dom(get_lower_digit)) = (BYTE)) & ran(get_lower_digit) : POW( ((0) .. ((16 - 1)))) & (([1,1,1,1,1,1,1,1]) : (BYTE)) & (([0,0,0,0,0,0,0,0]) : (BYTE)) & ((1) = ((2 ** 0))) & ((2) = ((2 ** 1))) & ((4) = ((2 ** 2))) & ((8) = ((2 ** 3))) & ((16) = ((2 ** 4))) & ((32) = ((2 ** 5))) & ((64) = ((2 ** 6))) & ((128) = ((2 ** 7))) & ((256) = ((2 ** 8))) & ((512) = ((2 ** 9))) & ((1024) = ((2 ** 10))) & ((2048) = ((2 ** 11))) & ((4096) = ((2 ** 12))) & ((8192) = ((2 ** 13))) & ((16384) = ((2 ** 14))) & ((32768) = ((2 ** 15))) & ((65536) = ((2 ** 16))) & ((card(byte_uchar)) = (256)) & ((card(uchar_byte)) = (256)) & ((UCHAR_MAX) : (INTEGER)) & ((UCHAR_MIN) : (INTEGER)) & ((1) = ((2 ** 0))) & ((2) = ((2 ** 1))) & ((4) = ((2 ** 2))) & ((8) = ((2 ** 3))) & ((16) = ((2 ** 4))) & ((32) = ((2 ** 5))) & ((64) = ((2 ** 6))) & ((128) = ((2 ** 7))) & ((256) = ((2 ** 8))) & (((2 ** 0)) = (1)) & (((2 ** 1)) = (2)) & (((2 ** 2)) = (4)) & (((2 ** 3)) = (8)) & (((2 ** 4)) = (16)) & (((2 ** 5)) = (32)) & (((2 ** 6)) = (64)) & (((2 ** 7)) = (128)) & (((-2 ** 7)) = (-128)) & (((2 ** 8)) = (256)) & (((2 ** 9)) = (512)) & (((2 ** 10)) = (1024)) & (((2 ** 11)) = (2048)) & (((2 ** 12)) = (4096)) & (((2 ** 13)) = (8192)) & (((2 ** 14)) = (16384)) & (((2 ** 15)) = (32768)) & (((2 ** 16)) = (65536));
"Assertion is verified";
((card(byte_schar)) = (256));
((card(schar_byte)) = (256));
((SCHAR_MAX) : (INTEGER));
((SCHAR_MIN) : (INTEGER));
((v0) : (BYTE));
((v0) : (SCHAR));
(0 <= v0);
not((0 <= v0));
((v1) : (UCHAR));
(v1 <= SCHAR_MAX);
not((v1 <= SCHAR_MAX));
((v1) : (((0) .. (127))));
((v1) : (((-128) .. (-1))));
((uchar_schar) = (((%(v1).(((v1) : (UCHAR)) & (v1 <= SCHAR_MAX) | v1)) \/ (%(v1).(((v1) : (UCHAR)) & not((v1 <= SCHAR_MAX)) | (v1 - 256))))));
((schar_byte) = (((%(v0).(((v0) : (SCHAR)) & (0 <= v0) | [(((v0) mod (2)) / 1),(((v0) mod (4)) / 2),(((v0) mod (8)) / 4),(((v0) mod (16)) / 8),(((v0) mod (32)) / 16),(((v0) mod (64)) / 32),(((v0) mod (128)) / 64),(((v0) mod (256)) / 128)])) \/ (%(v0).(((v0) : (SCHAR)) & not((0 <= v0)) | [((((v0 + 256)) mod (2)) / 1),((((v0 + 256)) mod (4)) / 2),((((v0 + 256)) mod (8)) / 4),((((v0 + 256)) mod (16)) / 8),((((v0 + 256)) mod (32)) / 16),((((v0 + 256)) mod (64)) / 32),((((v0 + 256)) mod (128)) / 64),((((v0 + 256)) mod (256)) / 128)])))));
((byte_schar) = (%(v0).(((v0) : (BYTE)) | ((((((((-128 * (v0 )(8)) + (64 * (v0 )(7))) + (32 * (v0 )(6))) + (16 * (v0 )(5))) + (8 * (v0 )(4))) + (4 * (v0 )(3))) + (2 * (v0 )(2))) + (v0 )(1)))));
((SCHAR) = (((SCHAR_MIN) .. (SCHAR_MAX))));
((SCHAR_MIN) = (-128));
((SCHAR_MAX) = ((128 - 1)));
"Well definedness";
((8) : (dom(v0)));
((v0) : (((dom(v0)) +-> (ran(v0)))));
((7) : (dom(v0)));
((6) : (dom(v0)));
((5) : (dom(v0)));
((4) : (dom(v0)));
((3) : (dom(v0)));
((2) : (dom(v0)));
((1) : (dom(v0)));
not(((1) = (0)));
((128) = ((2 ** 7)));
((64) = ((2 ** 6)));
((32) = ((2 ** 5)));
((16) = ((2 ** 4)));
((8) = ((2 ** 3)));
((4) = ((2 ** 2)));
((2) = ((2 ** 1)));
((1) = ((2 ** 0)));
((byte_schar) : (FIN(byte_schar)));
((schar_byte) : (FIN(schar_byte)))
END
&
THEORY EnumerateX
END

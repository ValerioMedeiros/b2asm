THEORY ProofList IS
_f(1) & _f(2) & _f(3) & _f(4) & WellDefinednessAssertions.2,(_f(177) & _f(178) & _f(6) & _f(175) & _f(176) & _f(7) & _f(173) & _f(174) & _f(8) & _f(171) & _f(172) & _f(9) & _f(169) & _f(170) & _f(10) & _f(167) & _f(168) & _f(11) & _f(165) & _f(166) & _f(12) & _f(163) & _f(164) & _f(13) & _f(161) & _f(162) & _f(14) & _f(159) & _f(160) & _f(15) & _f(157) & _f(158) & _f(16) & _f(155) & _f(156) & _f(17) & _f(153) & _f(154) & _f(18) & _f(151) & _f(152) & _f(19) & _f(149) & _f(150) & _f(20) & _f(147) & _f(148) & _f(21) & _f(22) & _f(23) & _f(24) & _f(25) & _f(26) & _f(27) & _f(28) & _f(29) & _f(30) & _f(31) & _f(32) & _f(33) & _f(34) & _f(35) & _f(36) & _f(37) & _f(38) & _f(39) & _f(40) & _f(41) & _f(42) & _f(43) & _f(44) & _f(45) & _f(46) & _f(47) & _f(48) & _f(49) & _f(50) & _f(51) & _f(52) & _f(53) & _f(54) & _f(55) & _f(88) => _f(180));
_f(1) & _f(2) & _f(3) & _f(4) & WellDefinednessAssertions.1,(_f(177) & _f(178) & _f(6) & _f(175) & _f(176) & _f(7) & _f(173) & _f(174) & _f(8) & _f(171) & _f(172) & _f(9) & _f(169) & _f(170) & _f(10) & _f(167) & _f(168) & _f(11) & _f(165) & _f(166) & _f(12) & _f(163) & _f(164) & _f(13) & _f(161) & _f(162) & _f(14) & _f(159) & _f(160) & _f(15) & _f(157) & _f(158) & _f(16) & _f(155) & _f(156) & _f(17) & _f(153) & _f(154) & _f(18) & _f(151) & _f(152) & _f(19) & _f(149) & _f(150) & _f(20) & _f(147) & _f(148) & _f(21) & _f(22) & _f(23) & _f(24) & _f(25) & _f(26) & _f(27) & _f(28) & _f(29) & _f(30) & _f(31) & _f(32) & _f(33) & _f(34) & _f(35) & _f(36) & _f(37) & _f(38) & _f(39) & _f(40) & _f(41) & _f(42) & _f(43) & _f(44) & _f(45) & _f(46) & _f(47) & _f(48) & _f(49) & _f(50) & _f(51) & _f(52) & _f(53) & _f(54) & _f(55) & _f(88) => _f(179));
_f(1) & _f(2) & WellDefinednessProperties.61,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(81) & _f(80) & _f(79) & _f(78) & _f(77) & _f(76) & _f(75) & _f(74) & _f(73) & _f(72) & _f(67) & _f(88) => _f(96));
_f(1) & _f(2) & WellDefinednessProperties.60,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(81) & _f(80) & _f(79) & _f(78) & _f(77) & _f(76) & _f(75) & _f(74) & _f(73) & _f(72) & _f(67) & _f(88) => _f(130));
_f(1) & _f(2) & WellDefinednessProperties.59,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(81) & _f(80) & _f(79) & _f(78) & _f(77) & _f(76) & _f(75) & _f(74) & _f(73) & _f(72) & _f(67) & _f(88) => _f(129));
_f(1) & _f(2) & WellDefinednessProperties.58,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(81) & _f(80) & _f(79) & _f(78) & _f(77) & _f(76) & _f(75) & _f(74) & _f(73) & _f(72) & _f(67) & _f(88) => _f(128));
_f(1) & _f(2) & WellDefinednessProperties.57,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(81) & _f(80) & _f(79) & _f(78) & _f(77) & _f(76) & _f(75) & _f(74) & _f(73) & _f(72) & _f(67) & _f(88) => _f(127));
_f(1) & _f(2) & WellDefinednessProperties.56,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(81) & _f(80) & _f(79) & _f(78) & _f(77) & _f(76) & _f(75) & _f(74) & _f(73) & _f(72) & _f(67) & _f(88) => _f(126));
_f(1) & _f(2) & WellDefinednessProperties.55,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(81) & _f(80) & _f(79) & _f(78) & _f(77) & _f(76) & _f(75) & _f(74) & _f(73) & _f(72) & _f(67) & _f(88) => _f(125));
_f(1) & _f(2) & WellDefinednessProperties.54,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(81) & _f(80) & _f(79) & _f(78) & _f(77) & _f(76) & _f(75) & _f(74) & _f(73) & _f(72) & _f(67) & _f(88) => _f(124));
_f(1) & _f(2) & WellDefinednessProperties.53,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(81) & _f(80) & _f(79) & _f(78) & _f(77) & _f(76) & _f(75) & _f(74) & _f(73) & _f(72) & _f(67) & _f(88) => _f(123));
_f(1) & _f(2) & WellDefinednessProperties.52,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(81) & _f(80) & _f(79) & _f(78) & _f(77) & _f(76) & _f(75) & _f(74) & _f(73) & _f(72) & _f(67) & _f(88) => _f(122));
_f(1) & _f(2) & WellDefinednessProperties.51,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(81) & _f(80) & _f(79) & _f(78) & _f(77) & _f(76) & _f(75) & _f(74) & _f(73) & _f(72) & _f(67) & _f(88) => _f(121));
_f(1) & _f(2) & WellDefinednessProperties.50,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(81) & _f(80) & _f(79) & _f(78) & _f(77) & _f(76) & _f(75) & _f(74) & _f(73) & _f(66) & _f(88) => _f(119));
_f(1) & _f(2) & WellDefinednessProperties.49,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(81) & _f(80) & _f(79) & _f(78) & _f(77) & _f(76) & _f(75) & _f(74) & _f(73) & _f(66) & _f(88) => _f(120));
_f(1) & _f(2) & WellDefinednessProperties.48,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(81) & _f(80) & _f(79) & _f(78) & _f(77) & _f(76) & _f(75) & _f(74) & _f(73) & _f(66) & _f(88) => _f(117));
_f(1) & _f(2) & WellDefinednessProperties.47,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(81) & _f(80) & _f(79) & _f(78) & _f(77) & _f(76) & _f(75) & _f(74) & _f(73) & _f(66) & _f(88) => _f(116));
_f(1) & _f(2) & WellDefinednessProperties.46,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(81) & _f(80) & _f(79) & _f(78) & _f(77) & _f(76) & _f(75) & _f(74) & _f(66) & _f(88) => _f(119));
_f(1) & _f(2) & WellDefinednessProperties.45,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(81) & _f(80) & _f(79) & _f(78) & _f(77) & _f(76) & _f(75) & _f(74) & _f(66) & _f(88) => _f(118));
_f(1) & _f(2) & WellDefinednessProperties.44,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(81) & _f(80) & _f(79) & _f(78) & _f(77) & _f(76) & _f(75) & _f(74) & _f(66) & _f(88) => _f(117));
_f(1) & _f(2) & WellDefinednessProperties.43,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(81) & _f(80) & _f(79) & _f(78) & _f(77) & _f(76) & _f(75) & _f(74) & _f(66) & _f(88) => _f(116));
_f(1) & _f(2) & WellDefinednessProperties.42,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(81) & _f(80) & _f(79) & _f(78) & _f(77) & _f(76) & _f(75) & _f(64) & _f(63) & _f(65) & _f(88) => _f(90));
_f(1) & _f(2) & WellDefinednessProperties.41,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(81) & _f(80) & _f(79) & _f(78) & _f(77) & _f(76) & _f(75) & _f(64) & _f(63) & _f(65) & _f(88) => _f(115));
_f(1) & _f(2) & WellDefinednessProperties.40,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(81) & _f(80) & _f(79) & _f(78) & _f(77) & _f(76) & _f(64) & _f(63) & _f(65) & _f(88) => _f(90));
_f(1) & _f(2) & WellDefinednessProperties.39,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(81) & _f(80) & _f(79) & _f(78) & _f(77) & _f(76) & _f(64) & _f(63) & _f(65) & _f(88) => _f(114));
_f(1) & _f(2) & WellDefinednessProperties.38,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(81) & _f(80) & _f(79) & _f(78) & _f(64) & _f(63) & _f(65) & _f(88) => _f(90));
_f(1) & _f(2) & WellDefinednessProperties.37,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(81) & _f(80) & _f(79) & _f(78) & _f(64) & _f(63) & _f(65) & _f(88) => _f(113));
_f(1) & _f(2) & WellDefinednessProperties.36,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(81) & _f(80) & _f(79) & _f(64) & _f(63) & _f(65) & _f(88) => _f(90));
_f(1) & _f(2) & WellDefinednessProperties.35,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(81) & _f(80) & _f(79) & _f(64) & _f(63) & _f(65) & _f(88) => _f(112));
_f(1) & _f(2) & WellDefinednessProperties.34,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(81) & _f(62) & _f(60) & _f(61) & _f(88) => _f(111));
_f(1) & _f(2) & WellDefinednessProperties.33,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(81) & _f(62) & _f(60) & _f(61) & _f(88) => _f(110));
_f(1) & _f(2) & WellDefinednessProperties.32,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(81) & _f(62) & _f(60) & _f(61) & _f(88) => _f(105));
_f(1) & _f(2) & WellDefinednessProperties.31,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(81) & _f(62) & _f(60) & _f(61) & _f(88) => _f(104));
_f(1) & _f(2) & WellDefinednessProperties.30,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(81) & _f(62) & _f(60) & _f(61) & _f(88) => _f(103));
_f(1) & _f(2) & WellDefinednessProperties.29,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(81) & _f(62) & _f(60) & _f(61) & _f(88) => _f(109));
_f(1) & _f(2) & WellDefinednessProperties.28,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(81) & _f(62) & _f(60) & _f(61) & _f(88) => _f(90));
_f(1) & _f(2) & WellDefinednessProperties.27,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(81) & _f(62) & _f(60) & _f(61) & _f(88) => _f(108));
_f(1) & _f(2) & WellDefinednessProperties.26,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(81) & _f(62) & _f(60) & _f(61) & _f(88) => _f(100));
_f(1) & _f(2) & WellDefinednessProperties.25,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(81) & _f(62) & _f(60) & _f(61) & _f(88) => _f(99));
_f(1) & _f(2) & WellDefinednessProperties.24,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(81) & _f(62) & _f(60) & _f(61) & _f(88) => _f(98));
_f(1) & _f(2) & WellDefinednessProperties.23,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(62) & _f(60) & _f(61) & _f(88) => _f(107));
_f(1) & _f(2) & WellDefinednessProperties.22,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(62) & _f(60) & _f(61) & _f(88) => _f(106));
_f(1) & _f(2) & WellDefinednessProperties.21,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(62) & _f(60) & _f(61) & _f(88) => _f(105));
_f(1) & _f(2) & WellDefinednessProperties.20,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(62) & _f(60) & _f(61) & _f(88) => _f(104));
_f(1) & _f(2) & WellDefinednessProperties.19,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(62) & _f(60) & _f(61) & _f(88) => _f(103));
_f(1) & _f(2) & WellDefinednessProperties.18,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(62) & _f(60) & _f(61) & _f(88) => _f(102));
_f(1) & _f(2) & WellDefinednessProperties.17,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(62) & _f(60) & _f(61) & _f(88) => _f(90));
_f(1) & _f(2) & WellDefinednessProperties.16,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(62) & _f(60) & _f(61) & _f(88) => _f(101));
_f(1) & _f(2) & WellDefinednessProperties.15,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(62) & _f(60) & _f(61) & _f(88) => _f(100));
_f(1) & _f(2) & WellDefinednessProperties.14,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(62) & _f(60) & _f(61) & _f(88) => _f(99));
_f(1) & _f(2) & WellDefinednessProperties.13,(_f(87) & _f(86) & _f(85) & _f(84) & _f(83) & _f(82) & _f(62) & _f(60) & _f(61) & _f(88) => _f(98));
_f(1) & _f(2) & WellDefinednessProperties.12,(_f(87) & _f(86) & _f(85) & _f(84) & _f(58) & _f(88) => _f(96));
_f(1) & _f(2) & WellDefinednessProperties.11,(_f(87) & _f(86) & _f(85) & _f(84) & _f(58) & _f(88) => _f(97));
_f(1) & _f(2) & WellDefinednessProperties.10,(_f(87) & _f(86) & _f(85) & _f(84) & _f(58) & _f(88) => _f(94));
_f(1) & _f(2) & WellDefinednessProperties.9,(_f(87) & _f(86) & _f(85) & _f(84) & _f(58) & _f(88) => _f(93));
_f(1) & _f(2) & WellDefinednessProperties.8,(_f(87) & _f(86) & _f(85) & _f(58) & _f(88) => _f(96));
_f(1) & _f(2) & WellDefinednessProperties.7,(_f(87) & _f(86) & _f(85) & _f(58) & _f(88) => _f(95));
_f(1) & _f(2) & WellDefinednessProperties.6,(_f(87) & _f(86) & _f(85) & _f(58) & _f(88) => _f(94));
_f(1) & _f(2) & WellDefinednessProperties.5,(_f(87) & _f(86) & _f(85) & _f(58) & _f(88) => _f(93));
_f(1) & _f(2) & WellDefinednessProperties.4,(_f(87) & _f(58) & _f(88) => _f(92));
_f(1) & _f(2) & WellDefinednessProperties.3,(_f(87) & _f(58) & _f(88) => _f(91));
_f(1) & _f(2) & WellDefinednessProperties.2,(_f(57) & _f(88) => _f(90));
_f(1) & _f(2) & WellDefinednessProperties.1,(_f(57) & _f(88) => _f(89));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.51,(_f(5) => _f(56));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.50,(_f(5) => _f(55));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.49,(_f(5) => _f(54));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.48,(_f(5) => _f(53));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.47,(_f(5) => _f(52));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.46,(_f(5) => _f(51));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.45,(_f(5) => _f(50));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.44,(_f(5) => _f(49));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.43,(_f(5) => _f(48));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.42,(_f(5) => _f(47));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.41,(_f(5) => _f(46));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.40,(_f(5) => _f(45));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.39,(_f(5) => _f(44));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.38,(_f(5) => _f(43));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.37,(_f(5) => _f(42));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.36,(_f(5) => _f(41));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.35,(_f(5) => _f(40));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.34,(_f(5) => _f(39));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.33,(_f(5) => _f(38));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.32,(_f(5) => _f(37));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.31,(_f(5) => _f(36));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.30,(_f(5) => _f(35));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.29,(_f(5) => _f(34));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.28,(_f(5) => _f(33));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.27,(_f(5) => _f(32));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.26,(_f(5) => _f(31));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.25,(_f(5) => _f(30));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.24,(_f(5) => _f(29));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.23,(_f(5) => _f(28));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.22,(_f(5) => _f(27));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.21,(_f(5) => _f(26));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.20,(_f(5) => _f(25));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.19,(_f(5) => _f(24));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.18,(_f(5) => _f(23));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.17,(_f(5) => _f(22));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.16,(_f(5) => _f(21));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.15,(_f(5) => _f(20));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.14,(_f(5) => _f(19));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.13,(_f(5) => _f(18));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.12,(_f(5) => _f(17));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.11,(_f(5) => _f(16));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.10,(_f(5) => _f(15));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.9,(_f(5) => _f(14));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.8,(_f(5) => _f(13));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.7,(_f(5) => _f(12));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.6,(_f(5) => _f(11));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.5,(_f(5) => _f(10));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.4,(_f(5) => _f(9));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.3,(_f(5) => _f(8));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.2,(_f(5) => _f(7));
_f(1) & _f(2) & _f(3) & _f(4) & AssertionLemmas.1,(_f(5) => _f(6))
END
&
THEORY Formulas IS
((NAT) = (((0) .. (2147483647)))) & ((INT) = (((-2147483647) .. (2147483647))));
((BIT) = ({0}\/{1})) & bit_not : BIT +-> BIT & bit_not : BIT >+> BIT & bit_not : BIT +->> BIT & bit_not : BIT --> BIT & dom(bit_not) = BIT & bit_not~ : BIT +-> BIT & ran(bit_not) = BIT & ((bit_not) : (((BIT) >->> (BIT)))) & ((bit_not) = ((({((0) |-> (1))}) \/ ({((1) |-> (0))})))) & bit_and : (BIT * BIT) +-> BIT & dom(bit_and) = (BIT * BIT) & ((bit_and) : ((((BIT * BIT)) --> (BIT)))) & ((bit_and) = ((((((({((((0) , (0))) |-> (0))}) \/ ({((((0) , (1))) |-> (0))}))) \/ ({((((1) , (0))) |-> (0))}))) \/ ({((((1) , (1))) |-> (1))})))) & bit_or : (BIT * BIT) +-> BIT & dom(bit_or) = (BIT * BIT) & ((bit_or) : ((((BIT * BIT)) --> (BIT)))) & ((bit_or) = ((((((({((((0) , (0))) |-> (0))}) \/ ({((((0) , (1))) |-> (1))}))) \/ ({((((1) , (0))) |-> (1))}))) \/ ({((((1) , (1))) |-> (1))})))) & bit_xor : (BIT * BIT) +-> BIT & dom(bit_xor) = (BIT * BIT) & ((bit_xor) : ((((BIT * BIT)) --> (BIT)))) & ((bit_xor) = ((((((({((((0) , (0))) |-> (0))}) \/ ({((((0) , (1))) |-> (1))}))) \/ ({((((1) , (0))) |-> (1))}))) \/ ({((((1) , (1))) |-> (0))})))) & ((bool_bit) = ({((TRUE) |-> (1))}\/{((FALSE) |-> (0))})) & ((BYTE_INDEX) = (((1) .. (8)))) & ((PHYS_BYTE_INDEX) = (((0) .. ((8 - 1))))) & ((BYTE) = (((BYTE_INDEX) --> (BIT)))) & !(b1).(((((b1) : (BYTE))) => (((size(b1)) = (8)) & b1 : seq(BIT) & b1 : NATURAL-{0} +-> BIT & not(b1 = {}) & ((b1) : (seq1(BIT)))))) & is_zero : BYTE +-> BIT & dom(is_zero) = BYTE & ((is_zero) : (((BYTE) --> (BIT)))) & ((is_zero) = (%(w1).(((w1) : (BYTE)) | (bool_bit )(bool((((w1 )(1)) = ((w1 )(2))) & (((w1 )(2)) = ((w1 )(3))) & (((w1 )(3)) = ((w1 )(4))) & (((w1 )(4)) = ((w1 )(5))) & (((w1 )(5)) = ((w1 )(6))) & (((w1 )(6)) = ((w1 )(7))) & (((w1 )(7)) = ((w1 )(8))) & (((w1 )(8)) = (0))))))) & parity_even : BYTE +-> BIT & dom(parity_even) = BYTE & ((parity_even) : (((BYTE) --> (BIT)))) & ((parity_even) = (%(bv).(((bv) : (BYTE)) | (1 - ((((((((((bv )(1) + (bv )(2)) + (bv )(3)) + (bv )(4)) + (bv )(5)) + (bv )(6)) + (bv )(7)) + (bv )(8))) mod (2)))))) & ((bv8_and) = (%(bt1,bt2).(((bt1) : (BYTE)) & ((bt2) : (BYTE)) | %(idx).(((idx) : (((1) .. (8)))) | (bit_and )((((bt1 )(idx)) |-> ((bt2 )(idx)))))))) & ((bv8_or) = (%(bt1,bt2).(((bt1) : (BYTE)) & ((bt2) : (BYTE)) | %(idx).(((idx) : (((1) .. (8)))) | (bit_or )((((bt1 )(idx)) |-> ((bt2 )(idx)))))))) & ((bv8_xor) = (%(bt1,bt2).(((bt1) : (BYTE)) & ((bt2) : (BYTE)) | %(idx).(((idx) : (((1) .. (8)))) | (bit_xor )((((bt1 )(idx)) |-> ((bt2 )(idx)))))))) & bv8get : (BYTE * PHYS_BYTE_INDEX) +-> BIT & dom(bv8get) = (BYTE * PHYS_BYTE_INDEX) & ((bv8get) : ((((BYTE * PHYS_BYTE_INDEX)) --> (BIT)))) & ((bv8get) = (%(bt1,ii).(((bt1) : (BYTE)) & ((ii) : (PHYS_BYTE_INDEX)) | (bt1 )((ii + 1))))) & bitset : (BYTE * PHYS_BYTE_INDEX) +-> BYTE & dom(bitset) = (BYTE * PHYS_BYTE_INDEX) & ((bitset) : ((((BYTE * PHYS_BYTE_INDEX)) --> (BYTE)))) & ((bitset) = (%(bt1,ii).(((bt1) : (BYTE)) & ((ii) : (PHYS_BYTE_INDEX)) | ((bt1) <+ ({(((ii + 1)) |-> (1))}))))) & bitclear : (BYTE * PHYS_BYTE_INDEX) +-> BYTE & dom(bitclear) = (BYTE * PHYS_BYTE_INDEX) & ((bitclear) : ((((BYTE * PHYS_BYTE_INDEX)) --> (BYTE)))) & ((bitclear) = (%(bt1,ii).(((bt1) : (BYTE)) & ((ii) : (PHYS_BYTE_INDEX)) | ((bt1) <+ ({(((ii + 1)) |-> (0))}))))) & complement : BYTE +-> BYTE & dom(complement) = BYTE & ((complement) : (((BYTE) --> (BYTE)))) & ((complement) = (%(bt).(((bt) : (BYTE)) | %(idx).(((idx) : (((1) .. (8)))) | (bit_not )((bt )(idx)))))) & swap : BYTE +-> BYTE & dom(swap) = BYTE & ((swap) : (((BYTE) --> (BYTE)))) & ((swap) = (%(bt).(((bt) : (BYTE)) | {((1) |-> ((bt )(5)))}\/{((2) |-> ((bt )(6)))}\/{((3) |-> ((bt )(7)))}\/{((4) |-> ((bt )(8)))}\/{((5) |-> ((bt )(1)))}\/{((6) |-> ((bt )(2)))}\/{((7) |-> ((bt )(3)))}\/{((8) |-> ((bt )(4)))}))) & rotateleft : BYTE +-> BYTE & dom(rotateleft) = BYTE & ((rotateleft) : (((BYTE) --> (BYTE)))) & ((rotateleft) = (%(bv).(((bv) : (BYTE)) | {((1) |-> ((bv )(8)))}\/{((2) |-> ((bv )(1)))}\/{((3) |-> ((bv )(2)))}\/{((4) |-> ((bv )(3)))}\/{((5) |-> ((bv )(4)))}\/{((6) |-> ((bv )(5)))}\/{((7) |-> ((bv )(6)))}\/{((8) |-> ((bv )(7)))}))) & rotateright : BYTE +-> BYTE & dom(rotateright) = BYTE & ((rotateright) : (((BYTE) --> (BYTE)))) & ((rotateright) = (%(bv).(((bv) : (BYTE)) | {((1) |-> ((bv )(2)))}\/{((2) |-> ((bv )(3)))}\/{((3) |-> ((bv )(4)))}\/{((4) |-> ((bv )(5)))}\/{((5) |-> ((bv )(6)))}\/{((6) |-> ((bv )(7)))}\/{((7) |-> ((bv )(8)))}\/{((8) |-> ((bv )(1)))}))) & get_upper_digit : BYTE +-> ((0) .. (15)) & dom(get_upper_digit) = BYTE & ((get_upper_digit) : (((BYTE) --> (((0) .. (15)))))) & ((get_upper_digit) = (%(by).(((by) : (BYTE)) | ((((8 * (by )(8)) + (4 * (by )(7))) + (2 * (by )(6))) + (by )(5))))) & get_lower_digit : BYTE +-> ((0) .. (15)) & dom(get_lower_digit) = BYTE & ((get_lower_digit) : (((BYTE) --> (((0) .. (15)))))) & ((get_lower_digit) = (%(by).(((by) : (BYTE)) | ((((8 * (by )(4)) + (4 * (by )(3))) + (2 * (by )(2))) + (by )(1))))) & ((BV16_INDX) = (((1) .. (16)))) & ((PHYS_BV16_INDEX) = (((0) .. ((16 - 1))))) & ((BV16) = (((BV16_INDX) --> (BIT)))) & !(b1).(((((b1) : (BV16))) => (((size(b1)) = (16)) & b1 : seq(BIT) & b1 : NATURAL-{0} +-> BIT & not(b1 = {}) & ((b1) : (seq1(BIT)))))) & ((complement16) = (%(bt).(((bt) : (BV16)) | %(idx).(((idx) : (((1) .. (16)))) | (bit_not )((bt )(idx)))))) & ((bv16_byte) = (%(bv).(((bv) : (BV16)) | (({((8) |-> ((bv )(16)))}\/{((7) |-> ((bv )(15)))}\/{((6) |-> ((bv )(14)))}\/{((5) |-> ((bv )(13)))}\/{((4) |-> ((bv )(12)))}\/{((3) |-> ((bv )(11)))}\/{((2) |-> ((bv )(10)))}\/{((1) |-> ((bv )(9)))}) , ({((8) |-> ((bv )(8)))}\/{((7) |-> ((bv )(7)))}\/{((6) |-> ((bv )(6)))}\/{((5) |-> ((bv )(5)))}\/{((4) |-> ((bv )(4)))}\/{((3) |-> ((bv )(3)))}\/{((2) |-> ((bv )(2)))}\/{((1) |-> ((bv )(1)))}))))) & ((byte_bv16) = (%(bv1,bv2).(((bv1) : (BYTE)) & ((bv2) : (BYTE)) | {((16) |-> ((bv1 )(8)))}\/{((15) |-> ((bv1 )(7)))}\/{((14) |-> ((bv1 )(6)))}\/{((13) |-> ((bv1 )(5)))}\/{((12) |-> ((bv1 )(4)))}\/{((11) |-> ((bv1 )(3)))}\/{((10) |-> ((bv1 )(2)))}\/{((9) |-> ((bv1 )(1)))}\/{((8) |-> ((bv2 )(8)))}\/{((7) |-> ((bv2 )(7)))}\/{((6) |-> ((bv2 )(6)))}\/{((5) |-> ((bv2 )(5)))}\/{((4) |-> ((bv2 )(4)))}\/{((3) |-> ((bv2 )(3)))}\/{((2) |-> ((bv2 )(2)))}\/{((1) |-> ((bv2 )(1)))}))) & ((UCHAR_MAX) = ((256 - 1))) & ((UCHAR_MIN) = (0)) & ((UCHAR) = (((UCHAR_MIN) .. (UCHAR_MAX)))) & ((byte_uchar) = (%(v0).(((v0) : (BYTE)) | ((((((((128 * (v0 )(8)) + (64 * (v0 )(7))) + (32 * (v0 )(6))) + (16 * (v0 )(5))) + (8 * (v0 )(4))) + (4 * (v0 )(3))) + (2 * (v0 )(2))) + (1 * (v0 )(1)))))) & ((uchar_byte) = (%(v0).(((v0) : (UCHAR)) | [(((v0) mod (2)) / 1),(((v0) mod (4)) / 2),(((v0) mod (8)) / 4),(((v0) mod (16)) / 8),(((v0) mod (32)) / 16),(((v0) mod (64)) / 32),(((v0) mod (128)) / 64),(((v0) mod (256)) / 128)]))) & ((SCHAR_MAX) = ((128 - 1))) & ((SCHAR_MIN) = (-128)) & ((SCHAR) = (((SCHAR_MIN) .. (SCHAR_MAX)))) & ((byte_schar) = (%(v0).(((v0) : (BYTE)) | ((((((((-128 * (v0 )(8)) + (64 * (v0 )(7))) + (32 * (v0 )(6))) + (16 * (v0 )(5))) + (8 * (v0 )(4))) + (4 * (v0 )(3))) + (2 * (v0 )(2))) + (v0 )(1))))) & ((schar_byte) = (((%(v0).(((v0) : (SCHAR)) & (0 <= v0) | [(((v0) mod (2)) / 1),(((v0) mod (4)) / 2),(((v0) mod (8)) / 4),(((v0) mod (16)) / 8),(((v0) mod (32)) / 16),(((v0) mod (64)) / 32),(((v0) mod (128)) / 64),(((v0) mod (256)) / 128)])) \/ (%(v0).(((v0) : (SCHAR)) & not((0 <= v0)) | [((((v0 + 256)) mod (2)) / 1),((((v0 + 256)) mod (4)) / 2),((((v0 + 256)) mod (8)) / 4),((((v0 + 256)) mod (16)) / 8),((((v0 + 256)) mod (32)) / 16),((((v0 + 256)) mod (64)) / 32),((((v0 + 256)) mod (128)) / 64),((((v0 + 256)) mod (256)) / 128)]))))) & ((uchar_schar) = (((%(v1).(((v1) : (UCHAR)) & (v1 <= SCHAR_MAX) | v1)) \/ (%(v1).(((v1) : (UCHAR)) & not((v1 <= SCHAR_MAX)) | (v1 - 256)))))) & ((schar_uchar) = (((%(v1).(((v1) : (((0) .. (127)))) | v1)) \/ (%(v1).(((v1) : (((-128) .. (-1)))) | (v1 + 256)))))) & ((SSHORT_MIN) = (-(32768))) & ((SSHORT_MAX) = ((32768 - 1))) & ((SSHORT) = (((SSHORT_MIN) .. (SSHORT_MAX)))) & ((bv16_sshort) = (%(v0).(((v0) : (BV16)) | ((((((((((((((((-32768 * (v0 )(16)) + (16384 * (v0 )(15))) + (8192 * (v0 )(14))) + (4096 * (v0 )(13))) + (2048 * (v0 )(12))) + (1024 * (v0 )(11))) + (512 * (v0 )(10))) + (256 * (v0 )(9))) + (128 * (v0 )(8))) + (64 * (v0 )(7))) + (32 * (v0 )(6))) + (16 * (v0 )(5))) + (8 * (v0 )(4))) + (4 * (v0 )(3))) + (2 * (v0 )(2))) + (v0 )(1))))) & ((sshort_bv16) = (((%(v0).(((v0) : (SSHORT)) & (0 <= v0) | [(((v0) mod (2)) / 1),(((v0) mod (4)) / 2),(((v0) mod (8)) / 4),(((v0) mod (16)) / 8),(((v0) mod (32)) / 16),(((v0) mod (64)) / 32),(((v0) mod (128)) / 64),(((v0) mod (256)) / 128),(((v0) mod (512)) / 256),(((v0) mod (1024)) / 512),(((v0) mod (2048)) / 1024),(((v0) mod (4096)) / 2048),(((v0) mod (8192)) / 4096),(((v0) mod (16384)) / 8192),(((v0) mod (32768)) / 16384),(((v0) mod (65536)) / 32768)])) \/ (%(v0).(((v0) : (SSHORT)) & not((0 <= v0)) | [(((((v0 + USHORT_MAX) + 1)) mod (2)) / 1),(((((v0 + USHORT_MAX) + 1)) mod (4)) / 2),(((((v0 + USHORT_MAX) + 1)) mod (8)) / 4),(((((v0 + USHORT_MAX) + 1)) mod (16)) / 8),(((((v0 + USHORT_MAX) + 1)) mod (32)) / 16),(((((v0 + USHORT_MAX) + 1)) mod (64)) / 32),(((((v0 + USHORT_MAX) + 1)) mod (128)) / 64),(((((v0 + USHORT_MAX) + 1)) mod (256)) / 128),(((((v0 + USHORT_MAX) + 1)) mod (512)) / 256),(((((v0 + USHORT_MAX) + 1)) mod (1024)) / 512),(((((v0 + USHORT_MAX) + 1)) mod (2048)) / 1024),(((((v0 + USHORT_MAX) + 1)) mod (4096)) / 2048),(((((v0 + USHORT_MAX) + 1)) mod (8192)) / 4096),(((((v0 + USHORT_MAX) + 1)) mod (16384)) / 8192),(((((v0 + USHORT_MAX) + 1)) mod (32768)) / 16384),(((((v0 + USHORT_MAX) + 1)) mod (65536)) / 32768)]))))) & ((ushort_sshort) = (((%(v1).(((v1) : (USHORT)) & (v1 <= SSHORT_MAX) | v1)) \/ (%(v1).(((v1) : (USHORT)) & not((v1 <= SSHORT_MAX)) | ((v1 - USHORT_MAX) - 1)))))) & ((sshort_ushort) = (((%(v1).(((v1) : (SSHORT)) & (0 <= v1) | v1)) \/ (%(v1).(((v1) : (SSHORT)) & not((0 <= v1)) | ((v1 + USHORT_MAX) + 1)))))) & ((schar_sshort) = (%(w1,w2).(((w1) : (SCHAR)) & ((w2) : (SCHAR)) | (bv16_sshort )((byte_bv16 )((((schar_byte )(w1)) |-> ((schar_byte )(w2)))))))) & ((USHORT_MAX) = ((65536 - 1))) & ((USHORT_MIN) = (0)) & ((USHORT) = (((USHORT_MIN) .. (USHORT_MAX)))) & ((bv16_ushort) = (%(v0).(((v0) : (BV16)) | ((((((((((((((((32768 * (v0 )(16)) + (16384 * (v0 )(15))) + (8192 * (v0 )(14))) + (4096 * (v0 )(13))) + (2048 * (v0 )(12))) + (1024 * (v0 )(11))) + (512 * (v0 )(10))) + (256 * (v0 )(9))) + (128 * (v0 )(8))) + (64 * (v0 )(7))) + (32 * (v0 )(6))) + (16 * (v0 )(5))) + (8 * (v0 )(4))) + (4 * (v0 )(3))) + (2 * (v0 )(2))) + (1 * (v0 )(1)))))) & ((ushort_bv16) = (%(v0).(((v0) : (USHORT)) | [(((v0) mod (2)) / 1),(((v0) mod (4)) / 2),(((v0) mod (8)) / 4),(((v0) mod (16)) / 8),(((v0) mod (32)) / 16),(((v0) mod (64)) / 32),(((v0) mod (128)) / 64),(((v0) mod (256)) / 128),(((v0) mod (512)) / 256),(((v0) mod (1024)) / 512),(((v0) mod (2048)) / 1024),(((v0) mod (4096)) / 2048),(((v0) mod (8192)) / 4096),(((v0) mod (16384)) / 8192),(((v0) mod (32768)) / 16384),(((v0) mod (65536)) / 32768)]))) & ((uchar_ushort) = (%(w1,w2).(((w1) : (UCHAR)) & ((w2) : (UCHAR)) | (bv16_ushort )((byte_bv16 )((((uchar_byte )(w1)) |-> ((uchar_byte )(w2))))))));
((is_zero16USHORT) = (%(nat1).(((nat1) : (USHORT)) | (bool_bit )(bool(((nat1) = (0))))))) & ((is_negative) = (%(w1).(((w1) : (BYTE)) | (w1 )(7)))) & ((half8UCHAR) = (%(ww).(((ww) : (UCHAR)) | ((ww) mod (16))))) & ((inc) = (%(w1).(((w1) : (BYTE)) | (uchar_byte )(((((byte_uchar )(w1) + 1)) mod (256)))))) & ((dec) = (%(w1).(((w1) : (BYTE)) | (uchar_byte )(((((byte_uchar )(w1) + 255)) mod (256)))))) & ((simple_add8UCHAR) = (%(w1,w2).(((w1) : (UCHAR)) & ((w2) : (UCHAR)) | (((w1 + w2)) mod (256))))) & ((add8UCHAR) = (%(carry,w1,w2).(((carry) : (BIT)) & ((w1) : (UCHAR)) & ((w2) : (UCHAR)) | ((((((((((((carry + w1) + w2)) mod (256))) , ((bool_bit )(bool((((carry + (uchar_schar )(w1)) + (uchar_schar )(w2)) +1 <= 0)))))) , ((bool_bit )(bool((UCHAR_MAX +1 <= ((carry + w1) + w2))))))) , ((bool_bit )(bool((16 <= ((carry + (half8UCHAR )(w1)) + (half8UCHAR )(w2)))))))) , ((bool_bit )(bool(((((((carry + w1) + w2)) mod (256))) = (0))))))))) & ((substract8UCHAR) = (%(carry,w1,w2).(((carry) : (BIT)) & ((w1) : (UCHAR)) & ((w2) : (UCHAR)) | ((((((((((((carry + w1) + (256 - w2))) mod (256))) , ((bool_bit )(bool((((carry + (uchar_schar )(w1)) - (uchar_schar )(w2)) +1 <= 0)))))) , ((bool_bit )(bool((UCHAR_MAX +1 <= ((carry + w1) - w2))))))) , ((bool_bit )(bool((16 <= ((carry + (half8UCHAR )(w1)) - (half8UCHAR )(w2)))))))) , ((bool_bit )(bool(((((((carry + w1) + (256 - w2))) mod (256))) = (0))))))))) & ((add16USHORT) = (%(b1,w1,w2).(((b1) : (BIT)) & ((w1) : (USHORT)) & ((w2) : (USHORT)) | ((((b1 + w1) + w2)) mod (65536))))) & ((add_carryUSHORT) = (%(b1,w1,w2).(((b1) : (BIT)) & ((w1) : (USHORT)) & ((w2) : (USHORT)) | (bool_bit )(bool((65536 <= ((b1 + w1) + w2))))))) & ((add_halfcarryUSHORT) = (%(b1,w1,w2).(((b1) : (BIT)) & ((w1) : (USHORT)) & ((w2) : (USHORT)) | (bool_bit )(bool((4096 +1 <= ((b1 + ((w1) mod (4096))) + ((w2) mod (4096))))))))) & ((sub16USHORT) = (%(b1,w1,w2).(((b1) : (BIT)) & ((w1) : (USHORT)) & ((w2) : (USHORT)) | ((((b1 + w1) + (65536 - w2))) mod (65536))))) & ((sub_carryUSHORT) = (%(b1,w1,w2).(((b1) : (BIT)) & ((w1) : (USHORT)) & ((w2) : (USHORT)) | (bool_bit )(bool((65536 +1 <= ((w1 + w2) - b1))))))) & ((sub_halfcarryUSHORT) = (%(b1,w1,w2).(((b1) : (BIT)) & ((w1) : (USHORT)) & ((w2) : (USHORT)) | (bool_bit )(bool((4096 +1 <= ((((w1) mod (4096)) + ((w2) mod (4096))) - b1))))))) & ((inc_BV16) = (%(w1).(((w1) : (BV16)) | (ushort_bv16 )(((((bv16_ushort )(w1) + 1)) mod (65536)))))) & ((dec_BV16) = (%(w1).(((w1) : (BV16)) | (ushort_bv16 )((((((bv16_ushort )(w1) + 65536) - 1)) mod (65536)))))) & ((update_refresh_reg) = (%(v0).(((v0) : (BYTE)) | (uchar_byte )(((128 * (v0 )(8)) + (((((((((64 * (v0 )(7)) + (32 * (v0 )(6))) + (16 * (v0 )(5))) + (8 * (v0 )(4))) + (4 * (v0 )(3))) + (2 * (v0 )(2))) + (v0 )(1))) mod (128))))))) & ((instruction_next) = (%(w1).(((w1) : (USHORT)) | (((w1 + 1)) mod (65536))))) & ((instruction_jump) = (%(p0,e0).(((p0) : (USHORT)) & ((e0) : (((-126) .. (129)))) | ((((p0 + e0) + 65536)) mod (65536)))));
byte_uchar : BYTE +-> UCHAR & byte_uchar : BYTE >+> UCHAR & byte_uchar : BYTE +->> UCHAR & byte_uchar : BYTE --> UCHAR & dom(byte_uchar) = BYTE & byte_uchar~ : UCHAR +-> BYTE & ran(byte_uchar) = UCHAR & ((byte_uchar) : (((BYTE) >->> (UCHAR)))) & uchar_byte : UCHAR +-> BYTE & uchar_byte : UCHAR >+> BYTE & uchar_byte : UCHAR +->> BYTE & uchar_byte : UCHAR --> BYTE & dom(uchar_byte) = UCHAR & uchar_byte~ : BYTE +-> UCHAR & ran(uchar_byte) = BYTE & ((uchar_byte) : (((UCHAR) >->> (BYTE)))) & ((byte_uchar) = ((uchar_byte)~)) & schar_uchar : SCHAR +-> UCHAR & schar_uchar : SCHAR >+> UCHAR & schar_uchar : SCHAR +->> UCHAR & schar_uchar : SCHAR --> UCHAR & dom(schar_uchar) = SCHAR & schar_uchar~ : UCHAR +-> SCHAR & ran(schar_uchar) = UCHAR & ((schar_uchar) : (((SCHAR) >->> (UCHAR)))) & uchar_schar : UCHAR +-> SCHAR & uchar_schar : UCHAR >+> SCHAR & uchar_schar : UCHAR +->> SCHAR & uchar_schar : UCHAR --> SCHAR & dom(uchar_schar) = UCHAR & uchar_schar~ : SCHAR +-> UCHAR & ran(uchar_schar) = SCHAR & ((uchar_schar) : (((UCHAR) >->> (SCHAR)))) & ((schar_uchar) = ((uchar_schar)~)) & byte_schar : BYTE +-> SCHAR & byte_schar : BYTE >+> SCHAR & byte_schar : BYTE +->> SCHAR & byte_schar : BYTE --> SCHAR & dom(byte_schar) = BYTE & byte_schar~ : SCHAR +-> BYTE & ran(byte_schar) = SCHAR & ((byte_schar) : (((BYTE) >->> (SCHAR)))) & schar_byte : SCHAR +-> BYTE & schar_byte : SCHAR >+> BYTE & schar_byte : SCHAR +->> BYTE & schar_byte : SCHAR --> BYTE & dom(schar_byte) = SCHAR & schar_byte~ : BYTE +-> SCHAR & ran(schar_byte) = BYTE & ((schar_byte) : (((SCHAR) >->> (BYTE)))) & ((byte_schar) = ((schar_byte)~)) & bv16_byte : BV16 +-> (BYTE * BYTE) & bv16_byte : BV16 >+> (BYTE * BYTE) & bv16_byte : BV16 +->> (BYTE * BYTE) & bv16_byte : BV16 --> (BYTE * BYTE) & dom(bv16_byte) = BV16 & bv16_byte~ : (BYTE * BYTE) +-> BV16 & ran(bv16_byte) = (BYTE * BYTE) & ((bv16_byte) : (((BV16) >->> ((BYTE * BYTE))))) & byte_bv16 : (BYTE * BYTE) +-> BV16 & byte_bv16 : (BYTE * BYTE) >+> BV16 & byte_bv16 : (BYTE * BYTE) +->> BV16 & byte_bv16 : (BYTE * BYTE) --> BV16 & dom(byte_bv16) = (BYTE * BYTE) & byte_bv16~ : BV16 +-> (BYTE * BYTE) & ran(byte_bv16) = BV16 & ((byte_bv16) : ((((BYTE * BYTE)) >->> (BV16)))) & ((bv16_byte) = ((byte_bv16)~)) & bv16_ushort : BV16 +-> USHORT & bv16_ushort : BV16 >+> USHORT & bv16_ushort : BV16 +->> USHORT & bv16_ushort : BV16 --> USHORT & dom(bv16_ushort) = BV16 & bv16_ushort~ : USHORT +-> BV16 & ran(bv16_ushort) = USHORT & ((bv16_ushort) : (((BV16) >->> (USHORT)))) & ushort_bv16 : USHORT +-> BV16 & ushort_bv16 : USHORT >+> BV16 & ushort_bv16 : USHORT +->> BV16 & ushort_bv16 : USHORT --> BV16 & dom(ushort_bv16) = USHORT & ushort_bv16~ : BV16 +-> USHORT & ran(ushort_bv16) = BV16 & ((ushort_bv16) : (((USHORT) >->> (BV16)))) & ((bv16_ushort) = ((ushort_bv16)~)) & uchar_ushort : (UCHAR * UCHAR) +-> USHORT & uchar_ushort : (UCHAR * UCHAR) >+> USHORT & uchar_ushort : (UCHAR * UCHAR) +->> USHORT & uchar_ushort : (UCHAR * UCHAR) --> USHORT & dom(uchar_ushort) = (UCHAR * UCHAR) & uchar_ushort~ : USHORT +-> (UCHAR * UCHAR) & ran(uchar_ushort) = USHORT & ((uchar_ushort) : ((((UCHAR * UCHAR)) >->> (USHORT)))) & bv16_sshort : BV16 +-> SSHORT & bv16_sshort : BV16 >+> SSHORT & bv16_sshort : BV16 +->> SSHORT & bv16_sshort : BV16 --> SSHORT & dom(bv16_sshort) = BV16 & bv16_sshort~ : SSHORT +-> BV16 & ran(bv16_sshort) = SSHORT & ((bv16_sshort) : (((BV16) >->> (SSHORT)))) & sshort_bv16 : SSHORT +-> BV16 & sshort_bv16 : SSHORT >+> BV16 & sshort_bv16 : SSHORT +->> BV16 & sshort_bv16 : SSHORT --> BV16 & dom(sshort_bv16) = SSHORT & sshort_bv16~ : BV16 +-> SSHORT & ran(sshort_bv16) = BV16 & ((sshort_bv16) : (((SSHORT) >->> (BV16)))) & ((bv16_sshort) = ((sshort_bv16)~)) & schar_sshort : (SCHAR * SCHAR) +-> SSHORT & schar_sshort : (SCHAR * SCHAR) >+> SSHORT & schar_sshort : (SCHAR * SCHAR) +->> SSHORT & schar_sshort : (SCHAR * SCHAR) --> SSHORT & dom(schar_sshort) = (SCHAR * SCHAR) & schar_sshort~ : SSHORT +-> (SCHAR * SCHAR) & ran(schar_sshort) = SSHORT & ((schar_sshort) : ((((SCHAR * SCHAR)) >->> (SSHORT)))) & sshort_ushort : SSHORT +-> USHORT & sshort_ushort : SSHORT >+> USHORT & sshort_ushort : SSHORT +->> USHORT & sshort_ushort : SSHORT --> USHORT & dom(sshort_ushort) = SSHORT & sshort_ushort~ : USHORT +-> SSHORT & ran(sshort_ushort) = USHORT & ((sshort_ushort) : (((SSHORT) >->> (USHORT)))) & ushort_sshort : USHORT +-> SSHORT & ushort_sshort : USHORT >+> SSHORT & ushort_sshort : USHORT +->> SSHORT & ushort_sshort : USHORT --> SSHORT & dom(ushort_sshort) = USHORT & ushort_sshort~ : SSHORT +-> USHORT & ran(ushort_sshort) = SSHORT & ((ushort_sshort) : (((USHORT) >->> (SSHORT)))) & ((sshort_ushort) = ((ushort_sshort)~)) & !(bb).(((((bb) : (BIT))) => ((((bit_not )(bb)) = ((1 - bb)))))) & ((dom(bit_and)) = ((BIT * BIT))) & ((ran(bit_not)) = (BIT)) & (((bit_not )(0)) = (1)) & (((bit_not )(1)) = (0)) & !(bb).(((((bb) : (BIT))) => ((((bit_not )((bit_not )(bb))) = (bb))))) & ((dom(bit_and)) = ((BIT * BIT))) & ((ran(bit_and)) = (BIT)) & (((bit_and )(((0) |-> (0)))) = (0)) & (((bit_and )(((0) |-> (1)))) = (0)) & (((bit_and )(((1) |-> (0)))) = (0)) & (((bit_and )(((1) |-> (1)))) = (1)) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT))) => ((((bit_and )(((b1) |-> (b2)))) = ((bit_and )(((b2) |-> (b1)))))))) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT)) & (((bit_and )(((b1) |-> (b2)))) = (1))) => ((((bit_and )(((b2) |-> (b1)))) = (1))))) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT)) & (((bit_and )(((b1) |-> (b2)))) = (0))) => ((((bit_and )(((b2) |-> (b1)))) = (0))))) & !(b1,b2,b3).(((((b1) : (BIT)) & ((b2) : (BIT)) & ((b3) : (BIT))) => ((((bit_and )(((b1) |-> ((bit_and )(((b2) |-> (b3))))))) = ((bit_and )((((bit_and )(((b1) |-> (b2)))) |-> (b3)))))))) & !(b1).(((((b1) : (BIT))) => ((((bit_and )(((b1) |-> (1)))) = (b1))))) & !(b1).(((((b1) : (BIT))) => ((((bit_and )(((b1) |-> (0)))) = (0))))) & ((dom(bit_or)) = ((BIT * BIT))) & ((ran(bit_or)) = (BIT)) & (((bit_or )(((0) |-> (0)))) = (0)) & (((bit_or )(((0) |-> (1)))) = (1)) & (((bit_or )(((1) |-> (0)))) = (1)) & (((bit_or )(((1) |-> (1)))) = (1)) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT))) => ((((bit_or )(((b1) |-> (b2)))) = ((bit_or )(((b2) |-> (b1)))))))) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT)) & (((bit_or )(((b1) |-> (b2)))) = (1))) => ((((bit_or )(((b2) |-> (b1)))) = (1))))) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT)) & (((bit_or )(((b1) |-> (b2)))) = (0))) => ((((bit_or )(((b2) |-> (b1)))) = (0))))) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT)) & (((bit_or )(((b1) |-> (0)))) = (1))) => (((b1) = (1))))) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT)) & (((bit_or )(((b1) |-> (0)))) = (0))) => (((b1) = (0))))) & !(b1,b2,b3).(((((b1) : (BIT)) & ((b2) : (BIT)) & ((b3) : (BIT))) => ((((bit_or )(((b1) |-> ((bit_or )(((b2) |-> (b3))))))) = ((bit_or )((((bit_or )(((b1) |-> (b2)))) |-> (b3)))))))) & !(b1,b2,b3).(((((b1) : (BIT)) & ((b2) : (BIT)) & ((b3) : (BIT)) & (((bit_or )(((b1) |-> (b2)))) = (1))) => ((((bit_or )(((b1) |-> ((bit_or )(((b2) |-> (b3))))))) = (1))))) & !(b1,b2,b3).(((((b1) : (BIT)) & ((b2) : (BIT)) & ((b3) : (BIT)) & (((bit_or )(((b1) |-> (b2)))) = (1))) => ((((bit_or )(((b1) |-> ((bit_or )(((b2) |-> (b3))))))) = ((bit_or )(((1) |-> (b3)))))))) & !(b1).(((((b1) : (BIT))) => ((((bit_or )(((b1) |-> (1)))) = (1))))) & !(b1).(((((b1) : (BIT))) => ((((bit_or )(((b1) |-> (0)))) = (b1))))) & !(b1).(((((b1) : (BIT))) => ((((bit_or )(((1) |-> (b1)))) = (1))))) & !(b1).(((((b1) : (BIT))) => ((((bit_or )(((0) |-> (b1)))) = (b1))))) & ((dom(bit_xor)) = ((BIT * BIT))) & ((ran(bit_xor)) = (BIT)) & (((bit_xor )(((0) |-> (0)))) = (0)) & (((bit_xor )(((0) |-> (1)))) = (1)) & (((bit_xor )(((1) |-> (0)))) = (1)) & (((bit_xor )(((1) |-> (1)))) = (0)) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT))) => ((((bit_xor )(((b1) |-> (b2)))) = ((bit_xor )(((b2) |-> (b1)))))))) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT)) & (((bit_xor )(((b1) |-> (b2)))) = (1))) => ((((bit_xor )(((b2) |-> (b1)))) = (1))))) & !(b1,b2).(((((b1) : (BIT)) & ((b2) : (BIT)) & (((bit_xor )(((b1) |-> (b2)))) = (0))) => ((((bit_xor )(((b2) |-> (b1)))) = (0))))) & !(b1,b2,b3).(((((b1) : (BIT)) & ((b2) : (BIT)) & ((b3) : (BIT))) => ((((bit_xor )(((b1) |-> ((bit_xor )(((b2) |-> (b3))))))) = ((bit_xor )((((bit_xor )(((b1) |-> (b2)))) |-> (b3)))))))) & !(b1,b2,b3).(((((b1) : (BIT)) & ((b2) : (BIT)) & ((b3) : (BIT)) & (((bit_xor )(((b1) |-> (b2)))) = (1))) => ((((bit_xor )(((b1) |-> ((bit_xor )(((b2) |-> (b3))))))) = ((bit_xor )(((1) |-> (b3)))))))) & !(bb).(((((bb) : (BIT))) => ((((bit_xor )(((bb) |-> (bb)))) = (0))))) & ((dom(bool_bit)) = (BOOL)) & ((ran(bit_xor)) = (BIT)) & (((bool_bit )(TRUE)) = (1)) & (((bool_bit )(FALSE)) = (0)) & !(bb).(((((bb) : (BIT))) => (((((bb) = (0))) or (((bb) = (1))))))) & !(bb).(((((bb) : (BIT)) & not(((bb) = (0)))) => (((bb) = (1))))) & !(bb).(((((bb) : (BIT)) & not(((bb) = (1)))) => (((bb) = (0))))) & ((card(BYTE)) = (256)) & is_zero : BYTE +-> BIT & dom(is_zero) = BYTE & ((is_zero) : (((BYTE) --> (BIT)))) & parity_even : BYTE +-> BIT & dom(parity_even) = BYTE & ((parity_even) : (((BYTE) --> (BIT)))) & bv8_and : (BYTE * BYTE) +-> BYTE & dom(bv8_and) = (BYTE * BYTE) & ((bv8_and) : ((((BYTE * BYTE)) --> (BYTE)))) & bv8_or : (BYTE * BYTE) +-> BYTE & dom(bv8_or) = (BYTE * BYTE) & ((bv8_or) : ((((BYTE * BYTE)) --> (BYTE)))) & bv8_xor : (BYTE * BYTE) +-> BYTE & dom(bv8_xor) = (BYTE * BYTE) & ((bv8_xor) : ((((BYTE * BYTE)) --> (BYTE)))) & complement : BYTE +-> BYTE & dom(complement) = BYTE & ((complement) : (((BYTE) --> (BYTE)))) & swap : BYTE +-> BYTE & dom(swap) = BYTE & ((swap) : (((BYTE) --> (BYTE)))) & rotateleft : BYTE +-> BYTE & dom(rotateleft) = BYTE & ((rotateleft) : (((BYTE) --> (BYTE)))) & rotateright : BYTE +-> BYTE & dom(rotateright) = BYTE & ((rotateright) : (((BYTE) --> (BYTE)))) & !(bt).(((((bt) : (BYTE))) => (((size(bt)) = (8))))) & 8 : INTEGER & 0 <= 8 & ((8) : (NATURAL)) & ((dom(is_zero)) = (BYTE)) & ran(is_zero) : POW( BIT) & ((dom(parity_even)) = (BYTE)) & ran(parity_even) : POW( BIT) & bv8_and : (BYTE * BYTE) +-> BYTE & dom(bv8_and) = (BYTE * BYTE) & ((bv8_and) : ((((BYTE * BYTE)) --> (BYTE)))) & ((dom(complement)) = (BYTE)) & ran(complement) : POW( BYTE) & ((dom(swap)) = (BYTE)) & ran(swap) : POW( BYTE) & ((dom(rotateleft)) = (BYTE)) & ran(rotateleft) : POW( BYTE) & ((dom(rotateright)) = (BYTE)) & ran(rotateright) : POW( BYTE) & ((dom(get_upper_digit)) = (BYTE)) & ran(get_upper_digit) : POW( ((0) .. ((16 - 1)))) & ((dom(get_lower_digit)) = (BYTE)) & ran(get_lower_digit) : POW( ((0) .. ((16 - 1)))) & (([1,1,1,1,1,1,1,1]) : (BYTE)) & (([0,0,0,0,0,0,0,0]) : (BYTE)) & ((1) = ((2 ** 0))) & ((2) = ((2 ** 1))) & ((4) = ((2 ** 2))) & ((8) = ((2 ** 3))) & ((16) = ((2 ** 4))) & ((32) = ((2 ** 5))) & ((64) = ((2 ** 6))) & ((128) = ((2 ** 7))) & ((256) = ((2 ** 8))) & ((512) = ((2 ** 9))) & ((1024) = ((2 ** 10))) & ((2048) = ((2 ** 11))) & ((4096) = ((2 ** 12))) & ((8192) = ((2 ** 13))) & ((16384) = ((2 ** 14))) & ((32768) = ((2 ** 15))) & ((65536) = ((2 ** 16))) & ((card(BV16)) = (65536)) & complement16 : BV16 +-> BV16 & dom(complement16) = BV16 & ((complement16) : (((BV16) --> (BV16)))) & ((byte_bv16) = ((bv16_byte)~)) & (([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) : (BV16)) & (([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]) : (BV16)) & ((card(byte_uchar)) = (256)) & ((card(uchar_byte)) = (256)) & ((UCHAR_MAX) : (INTEGER)) & ((UCHAR_MIN) : (INTEGER)) & ((1) = ((2 ** 0))) & ((2) = ((2 ** 1))) & ((4) = ((2 ** 2))) & ((8) = ((2 ** 3))) & ((16) = ((2 ** 4))) & ((32) = ((2 ** 5))) & ((64) = ((2 ** 6))) & ((128) = ((2 ** 7))) & ((256) = ((2 ** 8))) & ((card(byte_schar)) = (256)) & ((card(schar_byte)) = (256)) & ((SCHAR_MAX) : (INTEGER)) & ((SCHAR_MIN) : (INTEGER)) & ((1) = ((2 ** 0))) & ((2) = ((2 ** 1))) & ((4) = ((2 ** 2))) & ((8) = ((2 ** 3))) & ((16) = ((2 ** 4))) & ((32) = ((2 ** 5))) & ((64) = ((2 ** 6))) & ((128) = ((2 ** 7))) & ((256) = ((2 ** 8))) & ((card(bv16_sshort)) = (65536)) & ((card(sshort_bv16)) = (65536)) & ((SSHORT_MIN) : (SSHORT)) & ((SSHORT_MAX) : (SSHORT)) & ((1) = ((2 ** 0))) & ((2) = ((2 ** 1))) & ((4) = ((2 ** 2))) & ((8) = ((2 ** 3))) & ((16) = ((2 ** 4))) & ((32) = ((2 ** 5))) & ((64) = ((2 ** 6))) & ((128) = ((2 ** 7))) & ((256) = ((2 ** 8))) & ((512) = ((2 ** 9))) & ((1024) = ((2 ** 10))) & ((2048) = ((2 ** 11))) & ((4096) = ((2 ** 12))) & ((8192) = ((2 ** 13))) & ((16384) = ((2 ** 14))) & ((32768) = ((2 ** 15))) & ((65536) = ((2 ** 16))) & ((card(bv16_ushort)) = (65536)) & ((card(ushort_bv16)) = (65536)) & ((USHORT_MAX) : (INTEGER)) & ((USHORT_MIN) : (INTEGER)) & ((1) = ((2 ** 0))) & ((2) = ((2 ** 1))) & ((4) = ((2 ** 2))) & ((8) = ((2 ** 3))) & ((16) = ((2 ** 4))) & ((32) = ((2 ** 5))) & ((64) = ((2 ** 6))) & ((128) = ((2 ** 7))) & ((256) = ((2 ** 8))) & ((512) = ((2 ** 9))) & ((1024) = ((2 ** 10))) & ((2048) = ((2 ** 11))) & ((4096) = ((2 ** 12))) & ((8192) = ((2 ** 13))) & ((16384) = ((2 ** 14))) & ((32768) = ((2 ** 15))) & ((65536) = ((2 ** 16))) & (((2 ** 0)) = (1)) & (((2 ** 1)) = (2)) & (((2 ** 2)) = (4)) & (((2 ** 3)) = (8)) & (((2 ** 4)) = (16)) & (((2 ** 5)) = (32)) & (((2 ** 6)) = (64)) & (((2 ** 7)) = (128)) & (((-2 ** 7)) = (-128)) & (((2 ** 8)) = (256)) & (((2 ** 9)) = (512)) & (((2 ** 10)) = (1024)) & (((2 ** 11)) = (2048)) & (((2 ** 12)) = (4096)) & (((2 ** 13)) = (8192)) & (((2 ** 14)) = (16384)) & (((2 ** 15)) = (32768)) & (((2 ** 16)) = (65536));
"Assertion is verified";
((is_zero16USHORT) : (((USHORT) --> (BIT))));
((is_negative) : (((BYTE) --> (BIT))));
((half8UCHAR) : (((UCHAR) --> (UCHAR))));
((inc) : (((BYTE) --> (BYTE))));
((dec) : (((BYTE) --> (BYTE))));
((simple_add8UCHAR) : ((((UCHAR * UCHAR)) --> (UCHAR))));
((add16USHORT) : (((((BIT * USHORT) * USHORT)) --> (USHORT))));
((substract8UCHAR) : (((((BIT * UCHAR) * UCHAR)) --> (((((UCHAR * BIT) * BIT) * BIT) * BIT)))));
((add_carryUSHORT) : (((((BIT * USHORT) * USHORT)) --> (BIT))));
((sub16USHORT) : (((((BIT * USHORT) * USHORT)) --> (USHORT))));
((sub_carryUSHORT) : (((((BIT * USHORT) * USHORT)) --> (BIT))));
((inc_BV16) : (((BV16) --> (BV16))));
((dec_BV16) : (((BV16) --> (BV16))));
((update_refresh_reg) : (((BYTE) --> (BYTE))));
((instruction_next) : (((USHORT) --> (USHORT))));
((instruction_jump) : ((((USHORT * ((-126) .. (129)))) --> (USHORT))));
((dom(is_zero16USHORT)) = (USHORT));
((ran(is_zero16USHORT)) = (BIT));
((dom(is_negative)) = (BYTE));
((ran(is_negative)) = (BIT));
((dom(half8UCHAR)) = (UCHAR));
ran(half8UCHAR) : POW( UCHAR);
((dom(inc)) = (BYTE));
((ran(inc)) = (BYTE));
((dom(dec)) = (BYTE));
((ran(dec)) = (BYTE));
((dom(simple_add8UCHAR)) = ((UCHAR * UCHAR)));
((ran(simple_add8UCHAR)) = (UCHAR));
((dom(add8UCHAR)) = (((BIT * UCHAR) * UCHAR)));
((ran(add8UCHAR)) : (POW(((((UCHAR * BIT) * BIT) * BIT) * BIT))));
((dom(substract8UCHAR)) = (((BIT * UCHAR) * UCHAR)));
((ran(substract8UCHAR)) : (POW(((((UCHAR * BIT) * BIT) * BIT) * BIT))));
((dom(add16USHORT)) = (((BIT * USHORT) * USHORT)));
((ran(add16USHORT)) = (USHORT));
((dom(add_carryUSHORT)) = (((BIT * USHORT) * USHORT)));
((ran(add_carryUSHORT)) = (BIT));
((dom(sub16USHORT)) = (((BIT * USHORT) * USHORT)));
((ran(sub16USHORT)) = (USHORT));
((dom(sub_carryUSHORT)) = (((BIT * USHORT) * USHORT)));
((ran(sub_carryUSHORT)) = (BIT));
((dom(inc_BV16)) = (BV16));
((ran(inc_BV16)) = (BV16));
((dom(dec_BV16)) = (BV16));
((ran(dec_BV16)) = (BV16));
((dom(update_refresh_reg)) = (BYTE));
((ran(update_refresh_reg)) = (BYTE));
((dom(instruction_next)) = (USHORT));
((ran(instruction_next)) = (USHORT));
((dom(instruction_jump)) = ((USHORT * ((-126) .. (129)))));
((ran(instruction_jump)) = (USHORT));
((0) = ((schar_sshort )(((0) |-> (0)))));
((nat1) : (USHORT));
((w1) : (BYTE));
((ww) : (UCHAR));
((w1) : (UCHAR));
((w2) : (UCHAR));
((carry) : (BIT));
((w1) : (USHORT));
((b1) : (BIT));
((w2) : (USHORT));
((w1) : (BV16));
((v0) : (BYTE));
((p0) : (USHORT));
((e0) : (((-126) .. (129))));
((instruction_next) = (%(w1).(((w1) : (USHORT)) | (((w1 + 1)) mod (65536)))));
((update_refresh_reg) = (%(v0).(((v0) : (BYTE)) | (uchar_byte )(((128 * (v0 )(8)) + (((((((((64 * (v0 )(7)) + (32 * (v0 )(6))) + (16 * (v0 )(5))) + (8 * (v0 )(4))) + (4 * (v0 )(3))) + (2 * (v0 )(2))) + (v0 )(1))) mod (128)))))));
((dec_BV16) = (%(w1).(((w1) : (BV16)) | (ushort_bv16 )((((((bv16_ushort )(w1) + 65536) - 1)) mod (65536))))));
((inc_BV16) = (%(w1).(((w1) : (BV16)) | (ushort_bv16 )(((((bv16_ushort )(w1) + 1)) mod (65536))))));
((sub_halfcarryUSHORT) = (%(b1,w1,w2).(((b1) : (BIT)) & ((w1) : (USHORT)) & ((w2) : (USHORT)) | (bool_bit )(bool((4096 +1 <= ((((w1) mod (4096)) + ((w2) mod (4096))) - b1)))))));
((sub_carryUSHORT) = (%(b1,w1,w2).(((b1) : (BIT)) & ((w1) : (USHORT)) & ((w2) : (USHORT)) | (bool_bit )(bool((65536 +1 <= ((w1 + w2) - b1)))))));
((sub16USHORT) = (%(b1,w1,w2).(((b1) : (BIT)) & ((w1) : (USHORT)) & ((w2) : (USHORT)) | ((((b1 + w1) + (65536 - w2))) mod (65536)))));
((add_halfcarryUSHORT) = (%(b1,w1,w2).(((b1) : (BIT)) & ((w1) : (USHORT)) & ((w2) : (USHORT)) | (bool_bit )(bool((4096 +1 <= ((b1 + ((w1) mod (4096))) + ((w2) mod (4096)))))))));
((add_carryUSHORT) = (%(b1,w1,w2).(((b1) : (BIT)) & ((w1) : (USHORT)) & ((w2) : (USHORT)) | (bool_bit )(bool((65536 <= ((b1 + w1) + w2)))))));
((add16USHORT) = (%(b1,w1,w2).(((b1) : (BIT)) & ((w1) : (USHORT)) & ((w2) : (USHORT)) | ((((b1 + w1) + w2)) mod (65536)))));
((substract8UCHAR) = (%(carry,w1,w2).(((carry) : (BIT)) & ((w1) : (UCHAR)) & ((w2) : (UCHAR)) | ((((((((((((carry + w1) + (256 - w2))) mod (256))) , ((bool_bit )(bool((((carry + (uchar_schar )(w1)) - (uchar_schar )(w2)) +1 <= 0)))))) , ((bool_bit )(bool((UCHAR_MAX +1 <= ((carry + w1) - w2))))))) , ((bool_bit )(bool((16 <= ((carry + (half8UCHAR )(w1)) - (half8UCHAR )(w2)))))))) , ((bool_bit )(bool(((((((carry + w1) + (256 - w2))) mod (256))) = (0)))))))));
((add8UCHAR) = (%(carry,w1,w2).(((carry) : (BIT)) & ((w1) : (UCHAR)) & ((w2) : (UCHAR)) | ((((((((((((carry + w1) + w2)) mod (256))) , ((bool_bit )(bool((((carry + (uchar_schar )(w1)) + (uchar_schar )(w2)) +1 <= 0)))))) , ((bool_bit )(bool((UCHAR_MAX +1 <= ((carry + w1) + w2))))))) , ((bool_bit )(bool((16 <= ((carry + (half8UCHAR )(w1)) + (half8UCHAR )(w2)))))))) , ((bool_bit )(bool(((((((carry + w1) + w2)) mod (256))) = (0)))))))));
((simple_add8UCHAR) = (%(w1,w2).(((w1) : (UCHAR)) & ((w2) : (UCHAR)) | (((w1 + w2)) mod (256)))));
((dec) = (%(w1).(((w1) : (BYTE)) | (uchar_byte )(((((byte_uchar )(w1) + 255)) mod (256))))));
((inc) = (%(w1).(((w1) : (BYTE)) | (uchar_byte )(((((byte_uchar )(w1) + 1)) mod (256))))));
((half8UCHAR) = (%(ww).(((ww) : (UCHAR)) | ((ww) mod (16)))));
((is_negative) = (%(w1).(((w1) : (BYTE)) | (w1 )(7))));
((is_zero16USHORT) = (%(nat1).(((nat1) : (USHORT)) | (bool_bit )(bool(((nat1) = (0)))))));
"Well definedness";
((bool(((nat1) = (0)))) : (dom(bool_bit)));
((bool_bit) : (((dom(bool_bit)) +-> (ran(bool_bit)))));
((7) : (dom(w1)));
((w1) : (((dom(w1)) +-> (ran(w1)))));
((w1) : (dom(byte_uchar)));
((byte_uchar) : (((dom(byte_uchar)) +-> (ran(byte_uchar)))));
((((((byte_uchar )(w1) + 1)) mod (256))) : (dom(uchar_byte)));
((uchar_byte) : (((dom(uchar_byte)) +-> (ran(uchar_byte)))));
((((((byte_uchar )(w1) + 255)) mod (256))) : (dom(uchar_byte)));
((w1) : (dom(uchar_schar)));
((uchar_schar) : (((dom(uchar_schar)) +-> (ran(uchar_schar)))));
((w2) : (dom(uchar_schar)));
((bool((((carry + (uchar_schar )(w1)) + (uchar_schar )(w2)) +1 <= 0))) : (dom(bool_bit)));
((bool((UCHAR_MAX +1 <= ((carry + w1) + w2)))) : (dom(bool_bit)));
((w1) : (dom(half8UCHAR)));
((half8UCHAR) : (((dom(half8UCHAR)) +-> (ran(half8UCHAR)))));
((w2) : (dom(half8UCHAR)));
((bool((16 <= ((carry + (half8UCHAR )(w1)) + (half8UCHAR )(w2))))) : (dom(bool_bit)));
((bool(((((((carry + w1) + w2)) mod (256))) = (0)))) : (dom(bool_bit)));
((bool((((carry + (uchar_schar )(w1)) - (uchar_schar )(w2)) +1 <= 0))) : (dom(bool_bit)));
((bool((UCHAR_MAX +1 <= ((carry + w1) - w2)))) : (dom(bool_bit)));
((bool((16 <= ((carry + (half8UCHAR )(w1)) - (half8UCHAR )(w2))))) : (dom(bool_bit)));
((bool(((((((carry + w1) + (256 - w2))) mod (256))) = (0)))) : (dom(bool_bit)));
((bool((65536 <= ((b1 + w1) + w2)))) : (dom(bool_bit)));
((bool((4096 +1 <= ((b1 + ((w1) mod (4096))) + ((w2) mod (4096)))))) : (dom(bool_bit)));
((bool((65536 +1 <= ((w1 + w2) - b1)))) : (dom(bool_bit)));
((bool((4096 +1 <= ((((w1) mod (4096)) + ((w2) mod (4096))) - b1)))) : (dom(bool_bit)));
((w1) : (dom(bv16_ushort)));
((bv16_ushort) : (((dom(bv16_ushort)) +-> (ran(bv16_ushort)))));
((((((bv16_ushort )(w1) + 1)) mod (65536))) : (dom(ushort_bv16)));
((ushort_bv16) : (((dom(ushort_bv16)) +-> (ran(ushort_bv16)))));
(((((((bv16_ushort )(w1) + 65536) - 1)) mod (65536))) : (dom(ushort_bv16)));
((8) : (dom(v0)));
((v0) : (((dom(v0)) +-> (ran(v0)))));
((7) : (dom(v0)));
((6) : (dom(v0)));
((5) : (dom(v0)));
((4) : (dom(v0)));
((3) : (dom(v0)));
((2) : (dom(v0)));
((1) : (dom(v0)));
((((128 * (v0 )(8)) + (((((((((64 * (v0 )(7)) + (32 * (v0 )(6))) + (16 * (v0 )(5))) + (8 * (v0 )(4))) + (4 * (v0 )(3))) + (2 * (v0 )(2))) + (v0 )(1))) mod (128)))) : (dom(uchar_byte)));
((32768) = ((2 ** 15)));
((16384) = ((2 ** 14)));
((8192) = ((2 ** 13)));
((4096) = ((2 ** 12)));
((2048) = ((2 ** 11)));
((1024) = ((2 ** 10)));
((512) = ((2 ** 9)));
((256) = ((2 ** 8)));
((128) = ((2 ** 7)));
((64) = ((2 ** 6)));
((32) = ((2 ** 5)));
((16) = ((2 ** 4)));
((8) = ((2 ** 3)));
((4) = ((2 ** 2)));
((2) = ((2 ** 1)));
((1) = ((2 ** 0)));
instruction_jump : (USHORT * ((-126) .. (129))) +-> USHORT;
dom(instruction_jump) = (USHORT * ((-126) .. (129)));
instruction_next : USHORT +-> USHORT;
dom(instruction_next) = USHORT;
update_refresh_reg : BYTE +-> BYTE;
dom(update_refresh_reg) = BYTE;
dec_BV16 : BV16 +-> BV16;
dom(dec_BV16) = BV16;
inc_BV16 : BV16 +-> BV16;
dom(inc_BV16) = BV16;
sub_carryUSHORT : ((BIT * USHORT) * USHORT) +-> BIT;
dom(sub_carryUSHORT) = ((BIT * USHORT) * USHORT);
sub16USHORT : ((BIT * USHORT) * USHORT) +-> USHORT;
dom(sub16USHORT) = ((BIT * USHORT) * USHORT);
add_carryUSHORT : ((BIT * USHORT) * USHORT) +-> BIT;
dom(add_carryUSHORT) = ((BIT * USHORT) * USHORT);
substract8UCHAR : ((BIT * UCHAR) * UCHAR) +-> ((((UCHAR * BIT) * BIT) * BIT) * BIT);
dom(substract8UCHAR) = ((BIT * UCHAR) * UCHAR);
add16USHORT : ((BIT * USHORT) * USHORT) +-> USHORT;
dom(add16USHORT) = ((BIT * USHORT) * USHORT);
simple_add8UCHAR : (UCHAR * UCHAR) +-> UCHAR;
dom(simple_add8UCHAR) = (UCHAR * UCHAR);
dec : BYTE +-> BYTE;
dom(dec) = BYTE;
inc : BYTE +-> BYTE;
dom(inc) = BYTE;
half8UCHAR : UCHAR +-> UCHAR;
dom(half8UCHAR) = UCHAR;
is_negative : BYTE +-> BIT;
dom(is_negative) = BYTE;
is_zero16USHORT : USHORT +-> BIT;
dom(is_zero16USHORT) = USHORT;
((((0) |-> (0))) : (dom(schar_sshort)));
((schar_sshort) : (((dom(schar_sshort)) +-> (ran(schar_sshort)))))
END
&
THEORY EnumerateX
END

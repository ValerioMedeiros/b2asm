
END
 ;

END

 
THEORY Rules IS

/**
Test applying a lot of proof obligations.

*/


/**
* @ schar_byte: SCHAR >->> BYTE - verified by Eval (ProB)
* */
%v0.(v0: -128..127 & 0<=v0 | [v0 mod 2,v0 mod 4/2,v0 mod 8/4,v0 mod 16/8,v0 mod 32/16,v0 mod 64/32,v0 mod 128/64,v0 mod 256/128])\/%v0.(v0: -128..127 & not(0<=v0) | [(256+v0) mod 2,(256+v0) mod 4/2,(256+v0) mod 8/4,(256+v0) mod 16/8,(256+v0) mod 32/16,(256+v0) mod 64/32,(256+v0) mod 128/64,(256+v0) mod 256/128]): -128..127 >->> (1..8 --> {0,1})== btrue;    
 
   
/**
* @ byte_schar: BYTE >->> SCHAR - verified by Eval (ProB)
* */     
%v0.(v0: 1..8 --> {0,1} | -(128*v0(8))+64*v0(7)+32*v0(6)+16*v0(5)+8*v0(4)+4*v0(3)+2*v0(2)+v0(1)): 1..8 --> {0,1} >->> -128..127== btrue;    

/*
This rule checks the inverse functions  byte_schar = schar_byte~ - verified by Eval (ProB)
*/
%v0.(v0: {1,2,3,4,5,6,7,8} +-> {0,1} & dom(v0) = {1,2,3,4,5,6,7,8} | -(128*v0(8))+64*v0(7)+32*v0(6)+16*v0(5)+8*v0(4)+4*v0(3)+2*v0(2)+v0(1)) = (%v0.(v0: -128..127 & 0<=v0 | [v0 mod 2,v0 mod 4/2,v0 mod 8/4,v0 mod 16/8,v0 mod 32/16,v0 mod 64/32,v0 mod 128/64,v0 mod 256/128]))~\/(%v0.(v0: -128..127 & not(0<=v0) | [(256+v0) mod 2,(256+v0) mod 4/2,(256+v0) mod 8/4,(256+v0) mod 16/8,(256+v0) mod 32/16,(256+v0) mod 64/32,(256+v0) mod 128/64,(256+v0) mod 256/128]))~ == btrue;

/*
 	It was not need
	schar_uchar : SCHAR >->> UCHAR
	uchar_schar : UCHAR >->> SCHAR
*/


/*
This rule checks the inverse functions  - schar_uchar = uchar_schar~ - verified by Eval (ProB)
*/
%v1.(v1: 0..127 | v1)\/%v1.(v1: -128.. -1 | v1+256) = (%v1.(v1: 0..255 & v1<=127 | v1) \/ %v1.(v1: 0..255 & not(v1<=127) | v1-256))~== btrue;
 
 
/**
* @ uchar_byte : UCHAR >->> BYTE - verified by Eval (ProB)
**/
%v0.(v0: 0..255 | [v0 mod 2/1,v0 mod 4/2,v0 mod 8/4,v0 mod 16/8,v0 mod 32/16,v0 mod 64/32,v0 mod 128/64,v0 mod 256/128]): 0..255 >->> (1..8 --> {0,1}) == btrue;
/*
byte_uchar : BYTE >->> UCHAR - verified by Eval (ProB)
*/
%v0.(v0: 1..8 --> {0,1} | 128*v0(8)+64*v0(7)+32*v0(6)+16*v0(5)+8*v0(4)+4*v0(3)+2*v0(2)+1*v0(1)): (1..8 --> {0,1}) >->> 0..255 == btrue;
/*
This rule checks the inverse functions byte_uchar = uchar_byte~ - verified by Eval (ProB)
*/
%v0.(v0: 1..8 --> {0,1} | 128*v0(8)+64*v0(7)+32*v0(6)+16*v0(5)+8*v0(4)+4*v0(3)+2*v0(2)+1*v0(1)) = (%v0.(v0: 0..255 | [v0 mod 2/1,v0 mod 4/2,v0 mod 8/4,v0 mod 16/8,v0 mod 32/16,v0 mod 64/32,v0 mod 128/64,v0 mod 256/128]))~ == btrue


END

 &
    
THEORY Finite_Rules IS
    
/*
This rule checks  ushort_bv16: FIN(ushort_bv16) - verified by Eval (ProB)
*/ 
%v0.(v0: 0..65535 | [v0 mod 2/1,v0 mod 4/2,v0 mod 8/4,v0 mod 16/8,v0 mod 32/16,v0 mod 64/32,v0 mod 128/64,v0 mod 256/128,v0 mod 512/256,v0 mod 1024/512,v0 mod 2048/1024,v0 mod 4096/2048,v0 mod 8192/4096,v0 mod 16384/8192,v0 mod 32768/16384,v0 mod 65536/32768]): FIN(%v0.(v0: 0..65535 | [v0 mod 2/1,v0 mod 4/2,v0 mod 8/4,v0 mod 16/8,v0 mod 32/16,v0 mod 64/32,v0 mod 128/64,v0 mod 256/128,v0 mod 512/256,v0 mod 1024/512,v0 mod 2048/1024,v0 mod 4096/2048,v0 mod 8192/4096,v0 mod 16384/8192,v0 mod 32768/16384,v0 mod 65536/32768]))== btrue;
    

    
    
/*
This rule checks   bv16_ushort: FIN(bv16_ushort) - verified by Eval (ProB)
*/
%v0.(v0: 1..16 --> {0,1} | 32768*v0(16)+16384*v0(15)+8192*v0(14)+4096*v0(13)+2048*v0(12)+1024*v0(11)+512*v0(10)+256*v0(9)+128*v0(8)+64*v0(7)+32*v0(6)+16*v0(5)+8*v0(4)+4*v0(3)+2*v0(2)+1*v0(1)): FIN(%v0.(v0: 1..16 --> {0,1} | 32768*v0(16)+16384*v0(15)+8192*v0(14)+4096*v0(13)+2048*v0(12)+1024*v0(11)+512*v0(10)+256*v0(9)+128*v0(8)+64*v0(7)+32*v0(6)+16*v0(5)+8*v0(4)+4*v0(3)+2*v0(2)+1*v0(1)))== btrue;
    
    
    
/*
This rule checks  uchar_byte: FIN(uchar_byte) - verified by Eval (ProB)
*/
%v0.(v0: 0..255 | [v0 mod 2/1,v0 mod 4/2,v0 mod 8/4,v0 mod 16/8,v0 mod 32/16,v0 mod 64/32,v0 mod 128/64,v0 mod 256/128]): FIN(%v0.(v0: 0..255 | [v0 mod 2/1,v0 mod 4/2,v0 mod 8/4,v0 mod 16/8,v0 mod 32/16,v0 mod 64/32,v0 mod 128/64,v0 mod 256/128])) == btrue;

        
/*
This rule checks byte_uchar: FIN(byte_uchar) - verified by Eval (ProB)
*/
%v0.(v0: 1..8 --> {0,1} | 128*v0(8)+64*v0(7)+32*v0(6)+16*v0(5)+8*v0(4)+4*v0(3)+2*v0(2)+1*v0(1)): FIN(%v0.(v0: 1..8 --> {0,1} | 128*v0(8)+64*v0(7)+32*v0(6)+16*v0(5)+8*v0(4)+4*v0(3)+2*v0(2)+1*v0(1))) == btrue
  
    
END

  &

THEORY RulesProBAssertionLemmas_1 IS 


	 /* Expression from AssertionLemmas.1, it was added  in Tue Jan 08 07:58:26 BRT 2013
	  verified with ProB in 2493 milliseconds
	  Module Path:/media/B_Resources/Z80_ProB/TYPES.mch */

	  %v1.(v1: -32768..32767 & 0<=v1 | v1)\/%v1.(v1: -32768..32767 & not(0<=v1) | v1+65535+1) = (%v1.(v1: 0..65535 & v1<=32767 | v1)\/%v1.(v1: 0..65535 & not(v1<=32767) | v1-65535-1))~==btrue

END



&
THEORY RulesProBAssertionLemmas_3 IS 


	 /* Expression from AssertionLemmas.3, it was added  in Mon Jan 07 19:57:08 BRT 2013
	  verified with ProB in 2111 milliseconds
	  Module Path:/media/B_Resources/Z80_ProB/TYPES.mch */

	  (%v1.(v1: 0..65535 & v1<=32767 | v1)\/%v1.(v1: 0..65535 & not(v1<=32767) | v1-65535-1))~: -32768..32767 +-> 0..65535==btrue

END


&
THEORY RulesProBAssertionLemmas_5 IS 


	 /* Expression from AssertionLemmas.5, it was added  in Mon Jan 07 19:57:47 BRT 2013
	  verified with ProB in 2018 milliseconds
	  Module Path:/media/B_Resources/Z80_ProB/TYPES.mch */

	  ran(%v1.(v1: 0..65535 & v1<=32767 | v1)\/%v1.(v1: 0..65535 & not(v1<=32767) | v1-65535-1)) = -32768..32767==btrue

END


&
THEORY RulesProBAssertionLemmas_54 IS 


	 /* Expression from AssertionLemmas.54, it was added  in Tue Jan 08 08:01:32 BRT 2013
	  verified with ProB in 951 milliseconds
	  Module Path:/media/B_Resources/Z80_ProB/TYPES.mch */

	  %v1.(v1: 0..127 | v1)\/%v1.(v1: -128.. -1 | v1+256) = (%v1.(v1: 0..255 & v1<=127 | v1))~\/(%v1.(v1: 0..255 & not(v1<=127) | v1-256))~==btrue

END


&
THEORY RulesProBAssertionLemmas_11 IS 


	 /* Expression from AssertionLemmas.11, it was added  in Fri Jun 07 14:49:43 BRT 2013
	  verified with ProB in 17283 milliseconds
	  Module Path:/media/B_Resources/Z80_ProB/TYPES.mch */

	  btrue => schar_sshort~: SSHORT +-> SCHAR*SCHAR==btrue

END
